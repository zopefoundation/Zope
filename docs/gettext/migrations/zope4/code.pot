# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2023, The Zope developer community
# This file is distributed under the same license as the Zope package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zope 5.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-21 02:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../migrations/zope4/code.rst:4
msgid "Migrating Zope product code"
msgstr ""

#: ../../migrations/zope4/code.rst:5
msgid "The following list shows a few common migration issues independent of the Python version used."
msgstr ""

#: ../../migrations/zope4/code.rst:13
msgid "Changed import paths"
msgstr ""

#: ../../migrations/zope4/code.rst:14
msgid "Several commonly used Zope code modules have moved. Here's a short list of corrections you will have to make in your code. Many of these changed paths have already existed under Zope 2, so you can make those corrections ahead of time."
msgstr ""

#: ../../migrations/zope4/code.rst:26
msgid "``implementer`` versus ``implements``"
msgstr ""

#: ../../migrations/zope4/code.rst:27
msgid "How to signal that a class implements a specific interface has moved from a function called at class level into a class decorator and changed its name:"
msgstr ""

#: ../../migrations/zope4/code.rst:48
msgid "Migrating to the new bootstrap-based ZMI"
msgstr ""

#: ../../migrations/zope4/code.rst:49
msgid "Since Zope 4.0b6 the ZMI is styled using Bootstrap. The previously used GIF icons were replaced by font glyphs which are stored in the package `zmi.styles`_ (part of Zope) together with the CSS and JavaScript needed by Bootstrap."
msgstr ""

#: ../../migrations/zope4/code.rst:54
msgid "The free Font Awesome glyphs are used as icons, see the table of `available icons`_."
msgstr ""

#: ../../migrations/zope4/code.rst:58
msgid "Update existing package code"
msgstr ""

#: ../../migrations/zope4/code.rst:59
msgid "If you have a Product or package which contains types, which can be added via the ZMI, the default icon will be shown."
msgstr ""

#: ../../migrations/zope4/code.rst:62
msgid "To use one of the new icons add an attribute named ``zmi_icon`` to the class. As value use a name listed on `available icons`_ prefixed by ``fas fa-``. Example to use the info icon (i in a circle)::"
msgstr ""

#: ../../migrations/zope4/code.rst:68
msgid "A few Zope products provide content that can be added in the ZMI without showing a dialog to collect data such as an id or title. These will now default to showing the new modal dialog as well. You can prevent that by adding another class variable::"
msgstr ""

#: ../../migrations/zope4/code.rst:79
msgid "Custom icons and resources"
msgstr ""

#: ../../migrations/zope4/code.rst:80
msgid "To use custom icons (which are not part of `zmi.styles`) or load custom CSS resp. JavaScript, you have to:"
msgstr ""

#: ../../migrations/zope4/code.rst:83
msgid "create a directory and fill it with your assets"
msgstr ""

#: ../../migrations/zope4/code.rst:84
msgid "register this directory as resource directory"
msgstr ""

#: ../../migrations/zope4/code.rst:85
msgid "register a subscription adapter for :class:`App.interfaces.ICSSPaths` resp. :class:`App.interfaces.IJSPaths`. This adapter has to return an iterable of paths resp. URLs which should be loaded when rendering the ZMI."
msgstr ""

#: ../../migrations/zope4/code.rst:89
msgid "Example taken from `zmi.styles`_:"
msgstr ""

#: ../../migrations/zope4/code.rst:91
msgid "Register the resource directory via ZCML:"
msgstr ""

#: ../../migrations/zope4/code.rst:99
msgid "Create a subscription adapter returning the path to the CSS file (`zmi.styles`_ has this code in `subscriber.py`.):"
msgstr ""

#: ../../migrations/zope4/code.rst:118
msgid "Register the subscriber via ZCML:"
msgstr ""

#: ../../migrations/zope4/code.rst:128
msgid "Use custom resources via ZMI"
msgstr ""

#: ../../migrations/zope4/code.rst:129
msgid "To add custom CSS or JavaScript resources via ZMI you have to add a property:"
msgstr ""

#: ../../migrations/zope4/code.rst:131
msgid "``zmi_additional_css_paths`` for additional CSS"
msgstr ""

#: ../../migrations/zope4/code.rst:132
msgid "``zmi_additional_js_paths`` for additional JavaScript"
msgstr ""

#: ../../migrations/zope4/code.rst:134
msgid "The properties can have one of the following types:"
msgstr ""

#: ../../migrations/zope4/code.rst:136
msgid "``string``"
msgstr ""

#: ../../migrations/zope4/code.rst:137
msgid "``ustring``"
msgstr ""

#: ../../migrations/zope4/code.rst:138
msgid "``ulines``"
msgstr ""

#: ../../migrations/zope4/code.rst:140
msgid "The value of the property has to be one or more paths/URLs to CSS resp. JavaScript which will be included in the HTML of the ZMI. (Paths have to be resolvable by the browser aka not simple file system paths.)"
msgstr ""

#: ../../migrations/zope4/code.rst:145
msgid "Update existing Zope 2 ZMI templates"
msgstr ""

#: ../../migrations/zope4/code.rst:146
msgid "The old Zope 2 styling rules did not allow a modern and responsive design. Now the Zope 4 ZMI uses some basic CSS class names of the bootstrap CSS framework and structuring concepts for page layout and forms. A ZMI page usually sequences following templates nesting the page core:"
msgstr ""

#: ../../migrations/zope4/code.rst:151
msgid "manage_page_header()"
msgstr ""

#: ../../migrations/zope4/code.rst:152
msgid "manage_tabs()"
msgstr ""

#: ../../migrations/zope4/code.rst:153
msgid "page core"
msgstr ""

#: ../../migrations/zope4/code.rst:154
msgid "manage_page_footer()"
msgstr ""

#: ../../migrations/zope4/code.rst:156
msgid "The page core of any form or object listing ZMI template is starting by the html element ``<main class=\"container-fluid\">``. Usually ``<main>`` is nesting a ``p`` element for a help-text and the actual form. To make specific form styling possible the form-element has following CSS names:"
msgstr ""

#: ../../migrations/zope4/code.rst:161
msgid "zmi-$classname"
msgstr ""

#: ../../migrations/zope4/code.rst:162
msgid "zmi-edit|-add"
msgstr ""

#: ../../migrations/zope4/code.rst:164
msgid "In general specific functional ZMI elements are declared by a CSS class with a prefixed ``zmi-`` whereas the basic layout is done by usual bootstrap classes following the typical element nesting: any form element has a bootstrap-like form-group structure containing a label and an input field. Important: The width of the input field is defined by the nesting ``div`` container using the responsive grid classes ``col-sm-9 col md-10``. With the classes ``col-sm-3 col-md-2`` for the label, a complete bootstrap row of 12 is filled."
msgstr ""

#: ../../migrations/zope4/code.rst:183
msgid "The following buttons are constructed as ``div`` element with the classname ``zmi-controls``; the buttons use systematically the bootstrap class pair ``btn btn-primary``."
msgstr ""

#: ../../migrations/zope4/code.rst:193
msgid "The following example code shows a whole restructured DTML template rendering the Zope 4 ZMI:"
msgstr ""

#: ../../migrations/zope4/code.rst:196
msgid "**Example: updated DTML template** (from: ``../Zope/src/OFS/dtml/documentEdit.dtml``)"
msgstr ""

#: ../../migrations/zope4/code.rst:273
msgid "More details"
msgstr ""

#: ../../migrations/zope4/code.rst:274
msgid "**Textarea:** A text area element for editing template code or script code uses the JS library ``ace`` for syntax high-lighting and line numbering. ``Textarea`` elements which are declared by the CSS class ``zmi-code`` are transformed into an `ace` editor field. Moreover this element has an attribute ``data-contenttype`` which is needed by ace-editor to determine the fitting syntax highlighting.  ZPT-Example see: ``../Zope/src/Products/PageTemplates/www/ptEdit.zpt``"
msgstr ""

#: ../../migrations/zope4/code.rst:283
msgid "**File upload element:** The file upload element has its own form container (classfied as ``zmi-upload``).  All subsequent elements are nested as ``input-group`` containing a ``div`` classified as ``custom-file`` nesting the actual input element. An inline JS fired on the ``onchange`` event beautifies the file name shown after selecting it.  ZPT-Example see: ``../Zope/src/Products/PageTemplates/www/ptEdit.zpt``"
msgstr ""

#: ../../migrations/zope4/code.rst:291
msgid "**Hints and Warnings:** Some input fields show additional information; these are added as element ``<small>`` directly following the referred input field. (Both elements are nested by the width defining ``div`` container). Possible text colors are declared by typical bootstrap class names like ``text-warning``."
msgstr ""

#: ../../migrations/zope4/code.rst:297
msgid "**Icons:** Zope 4 object classes which are shown in the ZMI have declared a class variable ``zmi_icon``; this string corresponds to an appropriate font icon-CSS class supplied by the Fontawsome web font (https://fontawesome.com/icons)-"
msgstr ""

#: ../../migrations/zope4/code.rst:302
msgid "**Tables:** Bootstrap requires an explicit CSS class ``table`` for any table; especially long item lists should get an additional CSS class ``table-sm`` and maybe another class ``table-striped`` for a better readability. Finally it is recommended to add a specific id attribute like ``zmi-db_info``. The general table structure is compliant to bootstrap standard table (https://getbootstrap.com/docs/4.1/content/tables/)."
msgstr ""

#: ../../migrations/zope4/code.rst:310
msgid "**ZMI-classes:** All basic styling of the zmi-elements is defined in the CSS file, see: ``../Zope/src/zmi/styles/resources/zmi_base.css``"
msgstr ""

#: ../../migrations/zope4/code.rst:314
msgid "**Implicit  handling of old Zope 2 ZMI templates:** Old templates which do not contain the ``<main>`` element are automatically post-processed by a JavaScript function in the browser. The DOM is minimally modified, so that old forms will fit *somehow* into the Zope 4 layout. In the page footer a hint about this automatically customizing is shown."
msgstr ""
