# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2023, The Zope developer community
# This file is distributed under the same license as the Zope package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zope 5.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-21 02:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../zopebook/SimpleExamples.rst:2
msgid "Creating Basic Zope Applications"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:10
msgid "In order to create objects of type `Script (Python)` make sure to also install the package ``Products.PythonScripts``."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:14
msgid "This chapter will take you, step by step, through building a basic web application in Zope.  As we go through the chapter, we will examine some of Zope's main concepts at work.  Using Zope *Folder*, *Script (Python)*, and *Page Template* objects, we'll create a simple website for an imaginary zoo: the \"Zope Zoo\", of course!"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:20
msgid "We will develop the website as a Zope \"instance-space\" application.  A discussion of instance space is at the end of this chapter, but for now it is enough to know that instance-space applications are the easiest and fastest kind to build, because we can do everything in our favorite web browser."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:27
msgid "Goals for the Zope Zoo Web Site"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:29
msgid "As with any project, we first need to clarify our goals for the Zope Zoo application.  The application's primary goal is to create a website for the world-renowned Zope Zoo.  Furthermore, we want to make the website easy to use and manage.  Here are some things we'll do:"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:34
msgid "Enable web users to navigate the site easily, as if they were moving around a real zoo."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:37
msgid "Keep all our shared web layout tools, like a Cascading Style Sheet (CSS), in a single, easy-to-manage location."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:40
msgid "Design the website so that future site-wide changes are quick and easy to implement."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:43
msgid "Take advantage of Zope to create a dynamic website in which web pages build themselves \"on the fly\" when requested so that they are always up to date."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:47
msgid "Provide a simple file library of various documents that describe the animals."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:51
msgid "Beginning with a Folder"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:53
msgid "Zope *Folder* objects provide natural containers and organizers for web applications.  A good way to start building an application is to create a new *Folder* to hold all the objects and subfolders related to the application."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:58
msgid "Consider, for example, a Zope folder named *Invoices* to hold an application for managing invoices through the Web.  The *Invoices* folder could contain both the logic objects - or \"methods\" - which allow you to add and edit invoices, as well as the actual data of the invoices.  The *Invoices* folder thus becomes a small Zope application."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:64
msgid "We begin building our Zope Zoo website application by creating a Zope *Folder* object to hold it all together in one place."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:68
msgid "Step 1: Create *ZopeZoo* Folder"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:70
msgid "If you haven't already, start your Zope installation and log into the Zope Management Interface (ZMI) using your favorite browser.  (If you are not familiar with the ZMI, refer to the `Installing and Starting Zope <InstallingZope.html>`_ chapter.)"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:75
msgid "Navigate to Zope's top-level *root* folder."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:77
msgid "Use the *Select type to add* dropdown to create a new *Folder*. (We will refer to this dropdown as \"*Add* list\" from here on out)"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:80
msgid "Give the new folder the *Id* 'ZopeZoo'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:82
#: ../../zopebook/SimpleExamples.rst:147
#: ../../zopebook/SimpleExamples.rst:189
msgid "Click *Add*."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:84
msgid "(For now, we will ignore the optional *Title* field.)"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:87
msgid "Designing a Navigable Zoo"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:89
msgid "One of our goals is to enable easy user movement around the website.  A key to this easy movement is a navigation interface that is consistent among the site's pages.  In other words, every web page in the site should present a similar set of hyperlinks, in a similar place on the page, on which users can rely to guide them through the site."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:95
msgid "We also want to make sure the navigation links are always correct, regardless of how the structure of the site changes.  The solution is to design a meaningful site structure, and then create the Zope methods that will dynamically present the current structure to web users in the form of navigation links."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:101
msgid "First, let's define the site structure.  If the Zope Zoo was real, we might model the website's organization on the zoo's physical or logical design. For our purposes, we will pretend that the zoo houses three classes of animals.  We'll organize the website by adding folders inside our *ZopeZoo* folder."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:108
msgid "Step 2: Create Site Organization"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:110
msgid "Enter the *ZopeZoo* folder and create three subfolders with *Ids*: 'Reptiles', 'Mammals' and 'Fish'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:113
msgid "Inside the *Mammals* folder, add one folder named 'Whales'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:115
msgid "Navigate to the *Reptiles* folder and create two folders there: 'Lizards' and 'Snakes'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:118
msgid "In Zope's Navigator frame on the left side, you should see an icon for the *ZopeZoo* folder.  (If you don't see it, click on the cogwheel icon and then click *Refresh* in the Navigator). To view the *ZopeZoo* folder hierarchy - i.e. our nascent web site's structure - expand the *ZopeZoo* folder by clicking the little triangle next to the icon.  Similarly expand the zoo subfolders.  You'll see something like the figure below."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:128
msgid "Zoo folder structure"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:130
msgid "Now we create the basic presentation objects:  The main template and the style sheet *z_zoo.css*.  To get started, we ask a web designer to create a HTML mockup and a CSS file that together represent the web page layout shared throughout the site."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:135
msgid "For the style sheet we create a simple *File* object in Zope.  No need to make it dynamic."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:139
msgid "Step 3: Create the Style Sheet"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:141
msgid "Go to the top level of our zoo website, the *ZopeZoo* folder."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:143
msgid "Select *File* from the *Add* list."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:145
msgid "Give the file an *Id* of 'z_zoo.css'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:149
msgid "Select *z_zoo.css* to get its *Edit* view."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:151
msgid "Copy and paste these style definitions into the *File Data* area::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:178
msgid "At this stage, the HTML page the web designer created for us is valid XHTML 1.0 Strict and could also live in a static *File* object.  But in the next steps we will convert the page into a dynamic template by adding TAL and METAL statements, so we need a *Page Template* object:"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:183
msgid "Go back to the top level of our zoo website, the *ZopeZoo* folder."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:185
msgid "Select *Page Template* from the *Add* list."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:187
msgid "Give the Page Template an *Id* of 'index_html'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:192
msgid "Step 4: Create the Main Template"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:194
msgid "Select *index_html* to get its *Edit* view."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:196
msgid "Replace all of the stock template code with this::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:223
msgid "Our web designer marked placeholders for dynamic elements with UPPERCASE letters.  Using the *Test* tab of the new template, we can see the static HTML page.  Don't blame the web designer for the spartan layout.  It's for the sake of an easy example.  If you don't understand the XHTML and CSS code you might want to learn more about HTML first.  This chapter shows you how to make that code dynamic."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:231
msgid "Step 5: Dynamic Title and Headline"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:233
msgid "Go to the *Edit* tab of *index_html*."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:235
msgid "Find these two lines::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:241
msgid "Change them to look like that::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:247
msgid "The *path expression* 'context/title_or_id' returns the *title* of the context object or - if that doesn't exist - its *id*.  We work in the context of the *ZopeZoo* folder, which has no title.  So clicking again on the *Test* tab you'll see that title and headline are replaced by the id *ZopeZoo*.  (You might want to open the *Test* tab in a new window to see the title of the browser window.)  After completing the next step you'll be able to navigate to subfolders and see title and headline change depending on the context."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:257
msgid "Step 6: Generate Subfolder Menu Dynamically"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:259
msgid "Find the example menu item::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:265
msgid "Extend it like this::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:274
msgid "The *Python expression* 'context.objectValues(['Folder'])' returns all the subfolders in our context.  The 'tal:condition' statement checks if any subfolders exist.  If not, the complete 'ul' element is removed.  That means we have reached a *leaf* of the navigation tree and don't need a subfolder menu."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:280
msgid "Otherwise, the same expression in the 'tal:repeat' statement of the 'li' element will return a list of subfolders.  The 'li' element will be repeated for each *item* of this list.  In step 3 we created three subfolders in the *ZopeZoo* folder, so using again the *Test* tab we will see three list items, each with the correct id and link URL.  For now there are no links back, so use the back button of your browser if you can't wait exploring the site."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:289
msgid "Step 7: Generate Breadcrumbs Dynamically"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:291
msgid "Look for this line::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:295
#: ../../zopebook/SimpleExamples.rst:349
msgid "Replace it by::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:303
msgid "Using a trail of bread crumbs for navigation is quite an old idea, you might remember Hansel and Gretel tried that to find their way home.  In our days, breadcrumbs are used for site navigation and show the path back to the root (or home) of the site."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:308
msgid "The folder that contains the current object is also called its *parent*. As long as we have not reached the root object, each folder has again a *parent* folder.  'request.PARENTS' is a list of all these parents from the current object down to the root object of the Zope application. 'request.PARENTS[-2::-1]' returns a copy of that list in reverse order, starting with the second last element.  We don't need the last value because 'ZopeZoo' is located in the second level of our Zope application and we just want to navigate within the zoo."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:317
msgid "We use again a 'tal:repeat' statement to display the list.  Because we don't want to repeat the 'div' element, we add a dummy TAL element that doesn't show up in the rendered HTML page.  Now our site navigation is complete and you can explore the sections of the zoo."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:323
msgid "Step 8: Dynamic Status Bar"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:325
msgid "Go to this line::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:329
msgid "Extend it by two tal attributes::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:335
msgid "We need the status bar later in this chapter.  For now all we need is to make it invisible.  'options/status_message' will later be used for some messages.  But most pages don't have that variable at all and this path expression would raise an error.  'options/status_message | nothing' catches that error and falls back to the special  value *nothing*.  This is a common pattern to test if a value exists **and** is true."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:343
msgid "Step 9: Improve Style Sheet Link"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:345
msgid "Find this line in the HTML head::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:354
msgid "While the relative URI of the *href* attribute works thanks to acquisition, this isn't a good solution.  Using the *index_html* method for different folders, the browser can't know that all the *z_zoo.css* files are in fact one and the same.  Besides the CSS file the basic layout often contains a logo and other images, so making sure they are requested only once makes your site faster and you waste less bandwidth.  The *path expression* 'context/z_zoo.css/absolute_url' returns the absolute url of the CSS file. Using it in the *href* attribute we have a unique URI independent of the current context."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:365
msgid "Step 10: Factor out Basic Look and Feel"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:367
msgid "Rename *index_html* to 'z_zoo.pt'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:369
msgid "Wrap a 'metal:define-macro' statement around the whole page and add two 'metal:define-slot' statements for headline and content.  After all these changes our main template - now called *z_zoo.pt* - looks like this::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:418
msgid "Add again a new *Page Template* with the *id* 'index_html'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:420
msgid "Replace the example code of *index_html* with these two lines::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:425
msgid "Transforming our main template into an external macro and including it again using the 'metal:use-macro' statement doesn't change the resulting HTML page in any way.  But in the next step we can add code we only want to use in *index_html* without changing the main template."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:430
msgid "The 'metal:define-macro' statement in *z_zoo.pt* marks the complete template as reuseable macro, giving it the *id* *page*.  The expression 'context/z_zoo.pt/macros/page' in *index_html* points to that macro."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:434
msgid "For later use we also added two 'metal:define-slot' statements within the macro.  That allows to override *headline* and *body* while reusing the rest of the macro."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:439
msgid "Step 11: Add Special Front Page Code"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:441
msgid "Go to the *Edit* tab of the new *index_html*."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:443
msgid "Replace it by this code::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:459
msgid "The *index_html* should serve as the welcome screen for zoo visitors.  In order to do so, we override the default slots.  Take a look at how your site appears by clicking on the *View* tab of the *ZopeZoo* folder."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:463
msgid "You can use the navigation links to travel through the various sections of the Zoo.  Use this navigation interface to find the reptiles section.  Zope builds this page to display a folder by looking for the default folder view method, *index_html*.  It walks up the zoo site folder by folder until it finds the *index_html* method in the *ZopeZoo* folder.  It then calls this method on the *Reptiles* folder."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:471
msgid "Modifying a Subsection of the Site"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:473
msgid "What if you want the reptile page to display something besides the welcome message?  You can replace the *index_html* method in the reptile section with a more appropriate display method and still take advantage of the main template including navigation."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:479
msgid "Step 12: Create *index_html* for the Reptile House"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:481
msgid "Go to the *Reptile* folder."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:483
msgid "Add a new *Page Template* named 'index_html'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:485
msgid "Give it some content more appropriate to reptiles::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:502
msgid "Now take a look at the reptile page by going to the *Reptile* folder and clicking the *View* tab."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:505
msgid "Since the *index_html* method in the *Reptile* folder uses the same macro as the main *index_html*, the reptile page still includes your navigation system."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:509
msgid "Click on the *Snakes* link on the reptile page to see what the Snakes section looks like.  The snakes page looks like the *Reptiles* page because the *Snakes* folder acquires its *index_html* display method from the *Reptiles* folder instead of from the *ZopeZoo* folder."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:515
msgid "Creating a File Library"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:517
msgid "File libraries are common on websites since many sites distribute files of some sort.  The old fashioned way to create a file library is to upload your files, then create a web page that contains links to those files. With Zope you can dynamically create links to files.  When you upload, change or delete files, the file library's links can change automatically."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:524
msgid "Step 13: Creating Library Folder and some Files"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:526
msgid "Add a new *Folder* to *ZopeZoo* with *Id* 'Files' and *Title* 'File Library'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:529
msgid "Within that folder, add two *File* objects called 'DogGrooming' and 'HomeScienceExperiments'."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:532
msgid "We don't need any content within the files to test the library.  Feel free to add some more files and upload some content."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:536
msgid "Step 14: Adding *index_html* Script and Template"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:538
msgid "Within the *Files* folder, add this new *Script (Python)* with the *Id* 'index_html'::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:554
msgid "Also add a new *Page Template* named 'index_html.pt' with this content::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:574
msgid "This time the logic for our 'index_html' method will be more complex, so we should separate logic from presentation.  We start with two unconnected objects:  A *Script (Python)* to generate the results and a *Page Template* to present them as HTML page."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:579
msgid "The script loops over 'context.objectValues(['File'])', a list of all *File* objects in our *Files* folder, and appends for each file the needed values to the library_items list.  Again the dynamic values are UPPERCASE in our mockup, so what we need are the file *title*, the *url* and the last *modified* date in a format like this: Mar 1, 1997 1:45 pm.  Most Zope objects have the *bobobase_modification_time* method that returns a *DateTime* object.  Looking at the API of *DateTime*, you'll find that the *aCommon* method returns the format we want."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:588
msgid "Later we will have more return values, so we store them in the *options* dictionary.  Using the *Test* tab of the script you will see the returned dictionary contains all the dynamic content needed by our template."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:592
msgid "The template uses again the *page* macro of *z_zoo.pt*.  Unlike before there is only one 'metal:fill-slot' statement because we don't want to override the *headline* slot.  Go to the *Test* tab of the template to see how our file library will look like."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:598
msgid "Step 15: Bringing Things Together"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:600
msgid "Replace the last line of the *index_html* script by this one::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:604
msgid "Look for this example table row in *index_html.pt*::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:611
msgid "Replace it by that code::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:620
msgid "Now our script calls the *index_html.pt* after doing all the computing and passes the resulting *options* dictionary to the template, which creates the HTML presentation of *options*.  The *Test* tab of the template no longer works because it now depends on the script.  Go to the *Test* tab of the script to see the result: The file library!"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:626
msgid "If you add another file, Zope will dynamically adjust the file library page.  You may also want to try changing the titles of the files, uploading new files, or deleting some of the files."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:631
msgid "Step 16: Making the Library Sortable"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:633
msgid "Find the table headers in *index_html.pt*::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:638
msgid "Replace them with these dynamic table headers::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:649
msgid "Extend *index_html* to make it look like this::"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:678
msgid "The changes in the template are quite simple.  If an url is provided, the column header becomes a link.  If not, the 'not:' expression of the 'tal:omit-tag' statement is true and the 'a' tag is omitted.  The script will always provide an url for the column that isn't currently sorted."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:683
msgid "Basically we have to extend the logic, so most changes are in the script. First of all we define an optional parameter *sort*.  By default it is 'title', so if no value is passed in we sort by title.  Sort criteria and urls depend on the sort parameter.  We use the sort function of the built in *sequence* module to apply the sort criteria to the *items* list."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:689
msgid "Now view the file library and click on the *File* and *Last Modified* links to sort the files.  If there is a *sort* variable and if it has a value of *modified* then the files are sorted by modification time.  Otherwise the files are sorted by *title*."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:695
msgid "Building \"Instance-Space\" Applications"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:697
msgid "In Zope, there are a few ways to develop a web application.  The simplest and fastest way, and the one we've been concentrating on thus far in this book, is to build an application in *instance space*.  To understand the term \"instance space\", we need to once again put on our \"object orientation hats\"."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:703
msgid "When you create Zope objects by selecting them from the Zope \"Add\" list, you are creating *instances* of a *class* defined by someone else (see the `Object Orientation <ObjectOrientation.html>`_ chapter if you need to brush up on these terms).  For example, when you add a Script (Python) object to your Zope database, you are creating an instance of the Script (Python) class.  The Script (Python) class was written by a Zope Corporation engineer.  When you select \"Script (Python)\" from the Add list, and you fill in the form to give an id and title and whatnot, and click the submit button on the form, Zope creates an *instance* of that class in the Folder of your choosing.  Instances such as these are inserted into your Zope database and they live there until you delete them."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:715
msgid "In the Zope application server, most object instances serve to perform presentation duties, logic duties, or content duties.  You can \"glue\" these instances together to create basic Zope applications.  Since these objects are really instances of a class, the term \"instance space\" is commonly used to describe the Zope root folder and all of its subfolders.  \"Building an application in instance space\" is defined as the act of creating Zope object instances in this space and modifying them to act a certain way when they are executed."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:724
msgid "Instance-space applications are typically created from common Zope objects. Script (Python) objects, Folders, Page Templates, and other Zope services can be glued together to build simple applications."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:729
msgid "Instance-Space Applications vs. Python packages"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:731
msgid "In contrast to building applications in instance space, you may also build applications in Zope by building them as Python packages.  Building an application as a package differs from creating applications in instance space inasmuch as the act of creating a package typically is more familiar to developers and does not constrain them in any way."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:737
msgid "Building a package also typically allows you to more easily distribute an application to other people, and allows you to build objects that may more closely resemble your \"problem space\"."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:741
msgid "Building a package is typically more complicated than building an \"instance-space\" application, so we get started here by describing how to build instance-space applications.  When you find that it becomes difficult to maintain, extend, or distribute an instance-space application you've written, it's probably time to reconsider rewriting it as a package."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:748
msgid "The Next Step"
msgstr ""

#: ../../zopebook/SimpleExamples.rst:750
msgid "This chapter shows how simple web applications can be made.  Zope has many more features in addition to these, but these simple examples should get you started on create well managed, complex websites."
msgstr ""

#: ../../zopebook/SimpleExamples.rst:754
msgid "In the next chapter, we'll see how the Zope security system lets Zope work with many different users at the same time and allows them to collaborate together on the same projects."
msgstr ""
