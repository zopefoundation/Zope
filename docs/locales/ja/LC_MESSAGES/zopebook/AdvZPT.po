# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2023, The Zope developer community
# This file is distributed under the same license as the Zope package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zope 5.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../zopebook/AdvZPT.rst:2
msgid "Advanced Page Templates"
msgstr ""

#: ../../zopebook/AdvZPT.rst:4
msgid ""
"In the chapter entitled `Using Zope Page Templates <ZPT.html>`_ you "
"learned the basic features of Page Templates. In this chapter you'll "
"learn about advanced techniques including new types of expressions."
msgstr ""

#: ../../zopebook/AdvZPT.rst:10
msgid "Advanced TAL"
msgstr ""

#: ../../zopebook/AdvZPT.rst:12
msgid ""
"In this section we'll go over all TAL statements and their various "
"options in depth.  This material is covered more concisely in `Appendix "
"C: Zope Page Templates Reference <AppendixC.html>`_."
msgstr ""

#: ../../zopebook/AdvZPT.rst:16
msgid ""
"In this chapter, the terms `tag` and `element` are used in the sense laid"
" out by the `XHTML spec <https://www.w3.org/TR/xhtml1/#defs>`_. ``<p>`` "
"is a *tag*, while the entire block ``<p>stuff</p>`` from opening tag "
"through the closing tag is an *element*."
msgstr ""

#: ../../zopebook/AdvZPT.rst:24
msgid "Advanced Content Insertion"
msgstr ""

#: ../../zopebook/AdvZPT.rst:26
msgid ""
"You've already seen how ``tal:content`` and ``tal:replace`` work in the "
"chapter entitled `Using Zope Page Templates  <ZPT.html>`_. In this "
"section you'll learn some advanced tricks for inserting content."
msgstr ""

#: ../../zopebook/AdvZPT.rst:32
msgid "Inserting Structure"
msgstr ""

#: ../../zopebook/AdvZPT.rst:34
msgid ""
"Normally, the ``tal:replace`` and ``tal:content`` statements convert HTML"
" tags and entities in the text that they insert into an \"escaped\" form "
"that appears in the resulting document as plain text rather than HTML "
"markup. For instance, the ``<`` character is \"escaped\" to ``&amp;lt;``."
" If you want to insert text as part of the HTML structure of your "
"document, avoiding this conversion , you need to precede the expression "
"with the ``structure`` keyword."
msgstr ""

#: ../../zopebook/AdvZPT.rst:43
msgid ""
"This feature is useful when you are inserting a fragment of HTML or XML "
"that is stored by an object or generated by another Zope object.  For "
"instance, you may have news items that contain simple HTML markup such as"
" bold and italic text when they are rendered, and you want to preserve "
"this when inserting them into a \"Top News\" page.  In this case, you "
"might write::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:56
msgid ""
"This will insert the news items' HTML into a series of paragraphs. The "
"built-in variable ``context`` refers to the folder in which the template "
"is rendered; See the \"Expressions\" section further below in this "
"chapter for more information on ``context``. In this case, we use "
"``context`` as the starting point for finding the Zope object "
"``topNews``, which is presumably a list of news items or a Script which "
"fetches such a list."
msgstr ""

#: ../../zopebook/AdvZPT.rst:63
msgid ""
"The ``structure`` keyword prevents the text of each newsItem value from "
"being escaped.  It doesn't matter whether the text actually contains any "
"HTML markup, since ``structure`` really means \"leave this text alone\"."
"  This behavior is not the default because most of the text that you "
"insert into a template will *not* contain HTML, but may contain "
"characters that would interfere with the structure of your page."
msgstr ""

#: ../../zopebook/AdvZPT.rst:72
msgid "Dummy Elements"
msgstr ""

#: ../../zopebook/AdvZPT.rst:74
msgid ""
"You can include page elements that are visible in the template but not in"
" generated text by using the built-in variable ``nothing``, like this::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:82
msgid ""
"This can be useful for filling out parts of the page that will be "
"populated with dynamic content.  For instance, a table that usually has "
"ten rows will only have one row in the template. By adding nine dummy "
"rows, the template's layout will look more like the final result."
msgstr ""

#: ../../zopebook/AdvZPT.rst:89
msgid "Default Content"
msgstr ""

#: ../../zopebook/AdvZPT.rst:91
msgid ""
"You can leave the contents of an element alone by using the ``default`` "
"expression with ``tal:content`` or ``tal:replace``. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:97
msgid "This renders to::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:101
msgid ""
"Most often you will want to selectively include default content, rather "
"than always including it. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:113
msgid "Advanced Repetition"
msgstr ""

#: ../../zopebook/AdvZPT.rst:115
msgid ""
"You've already seen most of what you can do with the ``tal:repeat`` "
"statement in the chapter entitled `Using Zope Page Templates  "
"<ZPT.html>`_. This section covers a few advanced features of the "
"``tal:repeat`` statement."
msgstr ""

#: ../../zopebook/AdvZPT.rst:121
msgid "Repeat Variables"
msgstr ""

#: ../../zopebook/AdvZPT.rst:123
msgid ""
"One topic that bears more explanation are repeat variables. Repeat "
"variables provide information about the current repetition. The following"
" attributes are available on 'repeat' variables:"
msgstr ""

#: ../../zopebook/AdvZPT.rst:128
msgid "*index* - repetition number, starting from zero."
msgstr ""

#: ../../zopebook/AdvZPT.rst:130
msgid "*number* - repetition number, starting from one."
msgstr ""

#: ../../zopebook/AdvZPT.rst:132
msgid "*even* - true for even-indexed repetitions (0, 2, 4, ...)."
msgstr ""

#: ../../zopebook/AdvZPT.rst:134
msgid "*odd* - true for odd-indexed repetitions (1, 3, 5, ...)."
msgstr ""

#: ../../zopebook/AdvZPT.rst:136
msgid ""
"*parity* - the string ``odd`` for odd rows and ``even`` for even rows. "
"**Note:** This is based on *number*, not on *index*, so it is not the "
"same as what you get from the ``odd`` and ``even`` attributes, which are "
"based on ``index``."
msgstr ""

#: ../../zopebook/AdvZPT.rst:141
msgid ""
"*letter* - repetition position expressed as lowercase latin alphabet "
"letter (``a``, ``b``, ...)"
msgstr ""

#: ../../zopebook/AdvZPT.rst:144
msgid ""
"*Letter* - repetition position expressed as uppercase latin alphabet "
"letter (``A``, ``B``, ...)"
msgstr ""

#: ../../zopebook/AdvZPT.rst:147
msgid ""
"*roman* - repetition position expressed as lowercase roman numeral "
"(``i``, ``ii``, ...)"
msgstr ""

#: ../../zopebook/AdvZPT.rst:150
msgid ""
"*Roman* - repetition position expressed as uppercase roman numeral "
"(``I``, ``II``, ...)"
msgstr ""

#: ../../zopebook/AdvZPT.rst:153
msgid "*start* - true for the starting repetition (index 0)."
msgstr ""

#: ../../zopebook/AdvZPT.rst:155
msgid "*end* - true for the ending, or final, repetition."
msgstr ""

#: ../../zopebook/AdvZPT.rst:157
msgid ""
"*length* - length of the sequence, which will be the total number of "
"repetitions. Unsafe - see warning below."
msgstr ""

#: ../../zopebook/AdvZPT.rst:162
msgid ""
"The `length` attribute may not be available and lead to an error for "
"sequences that don't support the ``__len__`` method. To get around that "
"you can use `tal:define` to capture the sequence you're iterating over "
"first and then determining its length by calling e.g. "
"``tal:define=\"seq_len python: len(mysequence)\"``"
msgstr ""

#: ../../zopebook/AdvZPT.rst:168
msgid ""
"You can access the contents of a repeat variable using path expressions "
"or Python expressions.  In path expressions, you write a three-part path "
"consisting of the name ``repeat``, the statement variable's name, and the"
" name of the information you want, for example, ``repeat/item/start``.  "
"In Python expressions, you use normal dictionary notation to get the "
"repeat variable, then attribute access to get the information, for "
"example, ``python:repeat['item'].start``.  The reason that you can't "
"simply write ``repeat/start`` is that ``tal:repeat`` statements can be "
"nested, so you need to be able to specify which one you want information "
"about."
msgstr ""

#: ../../zopebook/AdvZPT.rst:181
msgid "Repetition Tips"
msgstr ""

#: ../../zopebook/AdvZPT.rst:183
msgid ""
"Here are a couple practical tips that you may find useful. Sometimes "
"you'd like to repeat part of your template, but there is no naturally "
"enclosing element.  In this case, you must add an enclosing element, but "
"you want to prevent it from appearing in the rendered page. You can do "
"this with the ``tal:omit-tag`` statement::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:196
msgid ""
"This is not just a matter of saving a few characters in the rendered "
"output.  Including the ``div`` tags in the output could affect the page "
"layout, especially if it has stylesheets. We use the tal ``omit-tag`` "
"statement to remove the ``div`` tag (and its pair closing tag) while "
"leaving its contents unmolested.  The ``tal:omit-tag`` statement is "
"described in more detail later in this chapter."
msgstr ""

#: ../../zopebook/AdvZPT.rst:204
msgid ""
"While it's been mentioned before, it's worth saying again: you can nest "
"``tal:repeat`` statements inside each other. Each ``tal:repeat`` "
"statement must have a different repeat variable name. Here's an example "
"that shows a math times-table::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:218
msgid ""
"This example uses Python expressions, which are covered later in this "
"chapter."
msgstr ""

#: ../../zopebook/AdvZPT.rst:220
msgid ""
"One useful feature that isn't supplied by ``tal:repeat`` is sorting. If "
"you want to sort a list you can either write your own sorting script "
"(which is quite easy in Python) or you can use the ``sequence.sort`` "
"utility function. Here's an example of how to sort a list of objects by "
"title::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:233
msgid ""
"This example tries to make things clearer by defining the sort arguments "
"outside the ``sort`` function.  The ``sequence.sort`` function takes a "
"sequence and a description of how to sort it. In this example the "
"description of how to sort the sequence is defined in the 'sort_on' "
"variable.  See `Appendix B: API Reference <AppendixB.html>`_ for more "
"information on the powerful ``sequence.sort`` function."
msgstr ""

#: ../../zopebook/AdvZPT.rst:242
msgid "Advanced Attribute Control"
msgstr ""

#: ../../zopebook/AdvZPT.rst:244
msgid ""
"You've already met the ``tal:attributes`` statement. You can use it to "
"dynamically replace tag attributes, for example, the ``href`` attribute "
"on an ``a`` element. You can replace more than one attribute on a tag by "
"separating attributes with semicolons. For example, the code below will "
"generate an \"href\" and a \"class\" attribute::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:255
msgid "You can also define attributes with XML namespaces. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:262
msgid ""
"Simply put the XML namespace prefix before the attribute name and you can"
" create attributes with XML namespaces."
msgstr ""

#: ../../zopebook/AdvZPT.rst:266
msgid "Defining Variables"
msgstr ""

#: ../../zopebook/AdvZPT.rst:268
msgid ""
"You can define your own variable using the ``tal:define`` attribute. "
"There are several reasons that you might want to do this. One reason is "
"to avoid having to write long expressions repeatedly in a template. "
"Another is to avoid having to call expensive methods repeatedly. You can "
"define a variable once within an element on a tag and then use it many "
"times within elements which are enclosed by this tag. For example, here's"
" a list that defines a variable and later tests it and repeats over it::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:285
msgid ""
"The ``tal:define`` statement creates the variable ``items``, which you "
"can use anywhere in the ``ul`` element.  Notice also how you can have two"
" TAL statements on the same ``ul`` tag.  See the section \"Interactions "
"Between TAL Statements\" later in this chapter for more information about"
" using more than one statement on a tag.  In this case the first "
"statement assigns the variable ``items`` and the second uses ``items`` in"
" a condition to see whether it is false (in this case, an empty sequence)"
" or true. If the ``items`` variable is false, then the ``ul`` element is "
"not shown."
msgstr ""

#: ../../zopebook/AdvZPT.rst:296
msgid ""
"Now, suppose that instead of simply removing the list when there are no "
"items, you want to show a message.  To do this, place the following "
"before the list::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:304
msgid ""
"The expression, ``not:container/objectIds`` is true when "
"``container/objectIds`` is false, and vice versa. See the section, \"Not "
"Expressions\" later in this chapter for more information."
msgstr ""

#: ../../zopebook/AdvZPT.rst:308
msgid ""
"You can't use your ``items`` variable here, because it isn't defined yet."
" If you move the definition of ``items`` to the ``h4`` element, then you "
"can't use it in the ``ul`` element any more, because it becomes a *local*"
" variable of the ``h4`` element. To have it available on both tags, you "
"can place the definition on some element that encloses both the ``h4`` "
"and the ``ul`` for example the ``body``."
msgstr ""

#: ../../zopebook/AdvZPT.rst:315
msgid ""
"You can define more than one variable using ``tal:define`` by separating "
"them with semicolons. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:321
msgid ""
"You can define as many variables as you wish. Each variable can have its "
"own global or local scope. You can also refer to earlier defined "
"variables in later definitions. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:329
msgid ""
"With judicious use of ``tal:define`` you can improve the efficiency and "
"readability of your templates."
msgstr ""

#: ../../zopebook/AdvZPT.rst:333
msgid "Omitting Tags"
msgstr ""

#: ../../zopebook/AdvZPT.rst:335
msgid ""
"You can remove tags with the ``tal:omit-tag`` statement. You will seldom "
"need to use this TAL statement, but occasionally it's useful. The omit-"
"tag attribute removes opening and closing tags, but does not affect the "
"contents of the element. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:342
msgid "Renders to::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:346
msgid ""
"At this level of usage, ``tal:omit-tag`` operates almost like "
"``tal:replace=\"default\"``. However, ``tal:omit-tag`` can also be used "
"with a true/false expression, in which case it only removes the tags if "
"the expression is true. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:356
msgid ""
"This will produce a list of friends, with our \"best\" friend's name in "
"bold."
msgstr ""

#: ../../zopebook/AdvZPT.rst:360
msgid "Error Handling"
msgstr ""

#: ../../zopebook/AdvZPT.rst:362
msgid ""
"If an error occurs in your page template, you can catch that error and "
"show a useful error message to your user.  For example, suppose your "
"template defines a variable using form data::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:372
msgid ""
"If Zope encounters a problem, like not being able to find the ``prefs`` "
"variable in the form data, the entire page will break; you'll get an "
"error page instead. Happily, you can avoid this kind of thing with "
"limited error handling using the ``tal:on-error`` statement::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:384
msgid ""
"When an error is raised while rendering a template, Zope looks for a "
"``tal:on-error`` statement to handle the error. It first looks in the "
"current element, then on its enclosing element, and so on until it "
"reaches the top-level element. When it finds an error handler, it "
"replaces the contents of that element with the error handling expression."
" In this case, the ``span`` element will contain an error message."
msgstr ""

#: ../../zopebook/AdvZPT.rst:392
msgid ""
"Typically you'll define an error handler on an element that encloses a "
"logical page element, for example a table. If an error crops up drawing "
"the table, then the error handler can simply omit the table from the "
"page, or else replace it with an error message of some sort."
msgstr ""

#: ../../zopebook/AdvZPT.rst:398
msgid "For more flexible error handling you can call a script. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:405
msgid ""
"Any error that occurs inside the ``div`` will call the ``handleError`` "
"script. Note that the ``structure`` option allows the script to return "
"HTML. Your error handling script can examine the error and take various "
"actions depending on the error. Your script gets access to the error "
"through the ``error`` variable in the namespace. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:424
msgid ""
"Your error handling script can take all kinds of actions, for example, it"
" might log the error by sending email."
msgstr ""

#: ../../zopebook/AdvZPT.rst:427
msgid ""
"The ``tal:on-error`` statement is not meant for general purpose exception"
" handling. For example, you shouldn't validate form input with it. You "
"should use a script for that, since scripts allow you to do powerful "
"exception handling. The ``tal:on-error`` statement is for dealing with "
"unusual problems that can occur when rendering templates."
msgstr ""

#: ../../zopebook/AdvZPT.rst:435
msgid "Interactions Between TAL Statements"
msgstr ""

#: ../../zopebook/AdvZPT.rst:437
msgid ""
"When there is only one TAL statement per element, the order in which they"
" are executed is simple. Starting with the root element, each element's "
"statements are executed, then each of its child elements are visited, in "
"order, and their statements are executed, and so on."
msgstr ""

#: ../../zopebook/AdvZPT.rst:443
msgid ""
"However, it's possible to have more than one TAL statement on the same "
"element. Any combination of statements may appear on the same element, "
"except that the ``tal:content`` and ``tal:replace`` statements may not "
"appear together."
msgstr ""

#: ../../zopebook/AdvZPT.rst:448
msgid "When an element has multiple statements, they are executed in this order:"
msgstr ""

#: ../../zopebook/AdvZPT.rst:451
msgid "define"
msgstr ""

#: ../../zopebook/AdvZPT.rst:453
msgid "condition"
msgstr ""

#: ../../zopebook/AdvZPT.rst:455
msgid "repeat"
msgstr ""

#: ../../zopebook/AdvZPT.rst:457
msgid "content or replace"
msgstr ""

#: ../../zopebook/AdvZPT.rst:459
msgid "attributes"
msgstr ""

#: ../../zopebook/AdvZPT.rst:461
msgid "omit-tag"
msgstr ""

#: ../../zopebook/AdvZPT.rst:463
msgid ""
"Since the ``tal:on-error`` statement is only invoked when an error "
"occurs, it does not appear in the list."
msgstr ""

#: ../../zopebook/AdvZPT.rst:466
msgid ""
"The reasoning behind this ordering goes like this: you often want to set "
"up variables for use in other statements, so define comes first. The very"
" next thing to do is decide whether this element will be included at all,"
" so condition is next; since the condition may depend on variables you "
"just set, it comes after define. It is valuable to be able to replace "
"various parts of an element with different values on each iteration of a "
"repeat, so repeat comes before content, replace and attributes. Content "
"and replace can't both be used on the same element so they occur at the "
"same place. Omit-tag comes last since no other statements are likely to "
"depend on it and since it should come after define and repeat."
msgstr ""

#: ../../zopebook/AdvZPT.rst:479
msgid "Here's an example element that includes several TAL statements::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:487
msgid ""
"Notice how the ``tal:define`` statement is executed first, and the other "
"statements rely on its results."
msgstr ""

#: ../../zopebook/AdvZPT.rst:490
msgid ""
"There are three limits you should be aware of when combining TAL "
"statements on elements:"
msgstr ""

#: ../../zopebook/AdvZPT.rst:493
msgid ""
"Only one of each kind of statement can be used on a single tag.  Since "
"HTML does not allow multiple attributes with the same name. For example, "
"you can't have two ``tal:define`` on the same tag."
msgstr ""

#: ../../zopebook/AdvZPT.rst:498
msgid ""
"Both of ``tal:content`` and ``tal:replace`` cannot be used on the same "
"tag, since their functions conflict."
msgstr ""

#: ../../zopebook/AdvZPT.rst:501
msgid ""
"The order in which you write TAL attributes on a tag does not affect the "
"order in which they execute.  No matter how you arrange them, the TAL "
"statements on a tag always execute in the fixed order described earlier."
msgstr ""

#: ../../zopebook/AdvZPT.rst:506
msgid ""
"If you want to override the ordering of TAL statements, you must do so by"
" enclosing the element in another element and placing some of the "
"statements on this new element. For example suppose you want to loop over"
" a series of items but skip some. Here's an attempt to write a template "
"that loops over the numbers zero to nine and skips three::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:522
msgid ""
"This template doesn't work due to TAL statement execution order. Despite "
"the order in which they are written, the condition is always tested "
"before the repeat is executed. This results in a situation in which the "
"``n`` variable is not defined until after it is tested, which ultimately "
"causes an error when you attempt to test or otherwise view the template. "
"Here's a way around this problem::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:540
msgid ""
"This template solves the problem by defining the ``n`` variable on an "
"enclosing ``div`` element. Notice that the ``div`` tag will not appear in"
" the output due to its ``tal:omit-tag`` statement."
msgstr ""

#: ../../zopebook/AdvZPT.rst:544
msgid ""
"Although ``span`` and ``div`` are natural choices for this in HTML, there"
" is, in general, no equivalent natural element in XML.  In this case, you"
" can use TAL's namespace in a new way: while TAL does not define any "
"tags, it doesn't prohibit any either.  You can make up any tag name you "
"like within the TAL namespace, and use it to make an element, like so::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:560
msgid ""
"The ``tal:series``, ``tal:items``, and ``tal:parts`` tags in this example"
" should be acceptable to tools that handle XML namespaces properly, and "
"to many HTML tools.  This method has two additional advantages over a "
"``div``.  First, TAL tags are omitted just like TAL attributes, so no "
"``tal:omit-tag`` is necessary. Second, TAL attributes in these tags don't"
" require their own ``tal:`` prefix, since they inherit the namespace of "
"the tag. The METAL namespace can be used in exactly the same fashion."
msgstr ""

#: ../../zopebook/AdvZPT.rst:570
msgid "Form Processing"
msgstr ""

#: ../../zopebook/AdvZPT.rst:572
msgid ""
"With Zope Page Templates you can use the form/action/response pattern. "
"The form and response should be Page Templates and the action should be a"
" script. The form template gathers the input and calls the action script."
" The action script should process the input and return a response "
"template."
msgstr ""

#: ../../zopebook/AdvZPT.rst:577
msgid "For example here's a part of a form template::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:587
msgid "This form could be processed by this script::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:595
msgid ""
"This script calls a method to process the input and then returns another "
"template, the response. You can render a Page Template from Python by "
"calling it. The response template typically contains an acknowledgment "
"that the form has been correctly processed."
msgstr ""

#: ../../zopebook/AdvZPT.rst:601
msgid ""
"The action script can do all kinds of things. It can validate input, "
"handle errors, send email, or whatever it needs to do to \"get the job "
"done\".  Here's a sketch of how to validate input with a script::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:616
msgid ""
"This script validates the form input and returns the form template with "
"an error message if there's a problem. The Script's ``context`` variable "
"is equivalent to ``context`` in TALES. You can pass Page Templates extra "
"information with keyword arguments. The keyword arguments are available "
"to the template via the ``options`` built-in variable. So the form "
"template in this example might include a section like this::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:629
msgid ""
"This example shows how you can display an error message that is passed to"
" the template via keyword arguments. Notice the use of ``| nothing`` to "
"handle the case where no ``error_message`` argument has been passed to "
"the template."
msgstr ""

#: ../../zopebook/AdvZPT.rst:634
msgid ""
"Depending on your application you may choose to redirect the user to a "
"response Page Template instead of returning it directly. This results in "
"twice as much network activity, but might be useful because it changes "
"the URL displayed in the user's browser to the URL of the Page Template, "
"rather than that of the action script."
msgstr ""

#: ../../zopebook/AdvZPT.rst:641
msgid ""
"If you need to set up a quick-and-dirty form, you can always create a "
"version of the form-action pair using Page Templates alone. You should "
"only do this when you don't care about error handling and when the "
"response will always be the same, no matter what the user submits. You "
"can use one of any number of hacks to call an input processing method "
"without inserting its results. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:652
msgid ""
"This sample calls the ``processInputs`` method and assigns the result to "
"the ``unused`` variable."
msgstr ""

#: ../../zopebook/AdvZPT.rst:656
msgid "Expressions"
msgstr ""

#: ../../zopebook/AdvZPT.rst:658
msgid ""
"You've already encountered Page Template expressions. Expressions provide"
" values to template statements. For example, in the TAL statement ``<td "
"tal:content=\"request/form/age\">Age</td>``, the expression of the "
"statement is ``request/form/age``. ``request/form/age`` is an example of "
"a *path expression*.  Path expressions describe objects by giving them "
"paths such as ``request/form/age``, or ``user/getUserName``. Expressions "
"only work in the context of a TAL statement; they do not work in "
"\"normal\" HTML inserted in your page templates.  In this section you'll "
"learn about all the different types of expressions, and variables."
msgstr ""

#: ../../zopebook/AdvZPT.rst:670
msgid "Built-in Page Template Variables"
msgstr ""

#: ../../zopebook/AdvZPT.rst:672
msgid ""
"Variables are names that you can use in expressions. You have already "
"seen some examples of the built-in variables such as ``template``, "
"``user``, ``repeat``, and ``request``.  Here is the complete list of the "
"other built-in variables and their uses. Note that these variables are "
"different than the built-in variables that you would use in a Script "
"(Python), they are only effective for Page Templates:"
msgstr ""

#: ../../zopebook/AdvZPT.rst:686
msgid "'nothing'"
msgstr ""

#: ../../zopebook/AdvZPT.rst:681
msgid ""
"A false value, similar to a blank string, that you can use in "
"``tal:replace`` or ``tal:content`` to erase an element or its contents.  "
"If you set an attribute to ``nothing``, the attribute is removed from the"
" tag (or not inserted).  A blank string, on the other hand, would insert "
"the tag with an empty value, as in ``alt=\"\"``."
msgstr ""

#: ../../zopebook/AdvZPT.rst:691
msgid "'default'"
msgstr ""

#: ../../zopebook/AdvZPT.rst:689
msgid ""
"A special value that doesn't change anything when used in "
"``tal:replace``, ``tal:content``, or ``tal:attributes``.  It leaves the "
"template text in place."
msgstr ""

#: ../../zopebook/AdvZPT.rst:699
msgid "'options'"
msgstr ""

#: ../../zopebook/AdvZPT.rst:694
msgid ""
"The keyword arguments, if any, that were passed to the template. When a "
"template is rendered from the web, no options are present. Options are "
"only available when a template is called from Python or by similarly "
"complex means.  For example, when the template ``t`` is called by the "
"Python expression ``t(foo=1)``, the path ``options/foo`` equals ``1``."
msgstr ""

#: ../../zopebook/AdvZPT.rst:705
msgid "'attrs'"
msgstr ""

#: ../../zopebook/AdvZPT.rst:702
msgid ""
"A dictionary of attributes of the current tag in the template.  The keys "
"are the attributes names, and the values are the original values of the "
"attributes in the template. This variable is rarely needed."
msgstr ""

#: ../../zopebook/AdvZPT.rst:710
msgid "'root'"
msgstr ""

#: ../../zopebook/AdvZPT.rst:708
msgid ""
"The root Zope object.  Use this to get Zope objects from fixed locations,"
" no matter where your template is placed or called."
msgstr ""

#: ../../zopebook/AdvZPT.rst:717
msgid "'context'"
msgstr ""

#: ../../zopebook/AdvZPT.rst:713
msgid ""
"The object on which the template is being called. This is often the same "
"as the *container*, but can be different if you are using acquisition.  "
"Use this to get Zope objects that you expect to find in different places "
"depending on how the template is called."
msgstr ""

#: ../../zopebook/AdvZPT.rst:726
msgid "'container'"
msgstr ""

#: ../../zopebook/AdvZPT.rst:720
msgid ""
"The container (usually a Folder) in which the template is kept.  Use this"
" to get Zope objects from locations relative to the template's permanent "
"home. The ``container`` and ``context`` variables refer to the same "
"object when a template is called from its normal location. However, when "
"a template is applied to another object (for example, a ZSQL Method) the "
"``container`` and ``context`` will not refer to the same object."
msgstr ""

#: ../../zopebook/AdvZPT.rst:730
msgid "'modules'"
msgstr ""

#: ../../zopebook/AdvZPT.rst:729
msgid ""
"The collection of Python modules available to templates.  See the section"
" on writing Python expressions."
msgstr ""

#: ../../zopebook/AdvZPT.rst:732
msgid ""
"You'll find examples of how to use these variables throughout this "
"chapter."
msgstr ""

#: ../../zopebook/AdvZPT.rst:736
msgid "String Expressions"
msgstr ""

#: ../../zopebook/AdvZPT.rst:738
msgid ""
"String expressions allow you to easily mix path expressions with text.  "
"All of the text after the leading ``string:`` is taken and searched for "
"path expressions.  Each path expression must be preceded by a dollar sign"
" (``$``).  Here are some examples::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:746
msgid ""
"If the path expression has more than one part (if it contains a slash), "
"or needs to be separated from the text that follows it, it must be "
"surrounded by braces (``{}``). For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:753
msgid ""
"Notice how in the example above, you need to surround the ``vegetable`` "
"path with braces so that Zope doesn't mistake it for ``vegetables``."
msgstr ""

#: ../../zopebook/AdvZPT.rst:757
msgid ""
"Since the text is inside of an attribute value, you can only include a "
"double quote by using the entity syntax ``&quot;``. Since dollar signs "
"are used to signal path expressions, a literal dollar sign must be "
"written as two dollar signs (``$$``). For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:766
msgid ""
"Some complex string formatting operations (such as search and replace or "
"changing capitalization) can't easily be done with string expressions. "
"For these cases, you should use Python expressions or Scripts."
msgstr ""

#: ../../zopebook/AdvZPT.rst:772
msgid "Path Expressions"
msgstr ""

#: ../../zopebook/AdvZPT.rst:774
msgid ""
"Path expressions refer to objects with a path that resembles a URL path. "
"A path describes a traversal from object to object. All paths begin with "
"a known object (such as a built-in variable, a built-in (such as "
"``True``), a repeat variable, or a user defined variable) and depart from"
" there to the desired object. Here are some example paths expressions::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:790
msgid ""
"With path expressions you can traverse from an object to its sub-objects "
"including properties and methods. You can also use acquisition in path "
"expressions. See the section entitled \"Calling Scripts from the Web\" in"
" the chapter entitled `Advanced Zope Scripting <ScriptingZope.html>`_ for"
" more information on acquisition and path traversal."
msgstr ""

#: ../../zopebook/AdvZPT.rst:797
msgid ""
"Zope restricts object traversal in path expressions in the same way that "
"it restricts object access via URLs. You must have adequate permissions "
"to access an object in order to refer to it with a path expression. See "
"the chapter entitled `Users and Security <Security.html>`_ for more "
"information about object access controls."
msgstr ""

#: ../../zopebook/AdvZPT.rst:805
msgid "Alternate Paths"
msgstr ""

#: ../../zopebook/AdvZPT.rst:807
msgid ""
"The path ``template/title`` is guaranteed to exist every time the "
"template is used, although it may be a blank string.  Some paths, such as"
" ``request/form/x``, may not exist during some renderings of the "
"template.  This normally causes an error when Zope evaluates the path "
"expression."
msgstr ""

#: ../../zopebook/AdvZPT.rst:813
msgid ""
"When a path doesn't exist, you may have a fall-back path or value that "
"you would like to use instead.  For instance, if ``request/form/x`` "
"doesn't exist, you might want to use ``context/x`` instead.  You can do "
"this by listing the paths in order of preference, separated by vertical "
"bar characters (``|``)::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:821
msgid ""
"Two variables that are very useful as the last path in a list of "
"alternates are ``nothing`` and ``default``.  For example, ``default`` "
"tells ``tal:content`` to leave the dummy content. Different TAL "
"statements interpret ``default`` and ``nothing`` differently. See "
"`Appendix C: Zope Page Templates Reference`_ for more information."
msgstr ""

#: ../../zopebook/AdvZPT.rst:828
msgid ""
"You can also use a non-path expression as the final part in an alternate-"
"path expression. For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:833
msgid ""
"In this example, if the ``request/form/age`` path doesn't exist, then the"
" value is the number 18. This form allows you to specify default values "
"to use which can't be expressed as paths. Note, you can only use a non-"
"path expression as the last alternative."
msgstr ""

#: ../../zopebook/AdvZPT.rst:839
msgid ""
"You can also test the existence of a path directly with the *exists* "
"expression type prefix. See the section \"Exists Expressions\" below for "
"more information on exists expressions."
msgstr ""

#: ../../zopebook/AdvZPT.rst:844
msgid "Not Expressions"
msgstr ""

#: ../../zopebook/AdvZPT.rst:846
msgid ""
"``Not`` expressions let you negate the value of other expressions. For "
"example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:853
msgid ""
"Not expressions return true when the expression they are applied to is "
"false, and vice versa. In Zope, zero, empty strings, empty sequences, "
"nothing, and None are considered false, while everything else is true.  "
"Non-existent paths are neither true nor false, and applying a ``not:`` to"
" such a path will fail."
msgstr ""

#: ../../zopebook/AdvZPT.rst:859
msgid ""
"There isn't much reason to use not expressions with Python expressions "
"since you can use the Python ``not`` keyword instead."
msgstr ""

#: ../../zopebook/AdvZPT.rst:863
msgid "Nocall Expressions"
msgstr ""

#: ../../zopebook/AdvZPT.rst:865
msgid ""
"An ordinary path expression tries to render the object that it fetches.  "
"This means that if the object is a function, Script, Method, or some "
"other kind of executable thing, then the expression will evaluate to the "
"result of calling the object. This is usually what you want, but not "
"always.  For example, if you want to put a page template into a variable "
"so that you can refer to its properties, you can't use a normal path "
"expression because it will render the template into a string."
msgstr ""

#: ../../zopebook/AdvZPT.rst:874
msgid ""
"If you put the ``nocall:`` expression type prefix in front of a path, it "
"prevents the rendering and simply gives you the object.  For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:882
msgid ""
"This expression type is also valuable when you want to define a variable "
"to hold a function or class from a module, for use in a Python "
"expression."
msgstr ""

#: ../../zopebook/AdvZPT.rst:886
msgid "Nocall expressions can also be used on functions, rather than objects::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:891
msgid ""
"This expression defines the ``join`` variable as a function "
"(``string.join``), rather than the result of calling a function."
msgstr ""

#: ../../zopebook/AdvZPT.rst:895
msgid "Exists Expressions"
msgstr ""

#: ../../zopebook/AdvZPT.rst:897
msgid ""
"An exists expression is true if its path exists, and otherwise is false."
"  For example here's one way to display an error message only if it is "
"passed in the request::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:905
msgid "You can do the same thing more easily with an exists expression::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:911
msgid "You can combine exists expressions with not expressions, for example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:917
msgid ""
"Note that in this example you can't use the expression, "
"``not:request/form/number``, since that expression will be true if the "
"'number' variable exists and is zero."
msgstr ""

#: ../../zopebook/AdvZPT.rst:922
msgid "Python Expressions"
msgstr ""

#: ../../zopebook/AdvZPT.rst:924
msgid ""
"The Python programming language is a simple and expressive one. If you "
"have never encountered it before, you should read one of the excellent "
"tutorials or introductions available at the `Python website "
"<https://www.python.org>`_."
msgstr ""

#: ../../zopebook/AdvZPT.rst:929
msgid ""
"A Page Template Python expression can contain anything that the Python "
"language considers an expression.  You can't use statements such as "
"``if`` and ``while``. In addition, Zope imposes some security "
"restrictions to keep you from accessing protected information, changing "
"secured data, and creating problems such as infinite loops. See the "
"chapter entitled `Advanced Zope Scripting <ScriptingZope.html>`_ for more"
" information on Python security restrictions."
msgstr ""

#: ../../zopebook/AdvZPT.rst:939
msgid "Comparisons"
msgstr ""

#: ../../zopebook/AdvZPT.rst:941
msgid ""
"One place where Python expressions are practically necessary is in "
"``tal:condition`` statements.  You usually want to compare two strings or"
" numbers, and there is no support in TAL to do this without Python "
"expressions.  In Python expressions, you can use the comparison operators"
" ``<`` (less than), ``>`` (greater than), ``==`` (equal to), and ``!=`` "
"(not equal to).  You can also use the boolean operators ``and``, ``not``,"
" and ``or``.  For example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:957
msgid ""
"This example loops over a collection of objects, printing information "
"about widgets which are of type ``gear``."
msgstr ""

#: ../../zopebook/AdvZPT.rst:960
msgid ""
"Sometimes you want to choose different values inside a single statement "
"based on one or more conditions.  You can do this with the and and or "
"operators, like this::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:971
msgid ""
"If the user is ``Anonymous``, then the ``span`` element is replaced with "
"the text \"need to log in\".  Otherwise, the default content is used, "
"which is in this case \"are logged in as ...\"."
msgstr ""

#: ../../zopebook/AdvZPT.rst:976
msgid ""
"This operator combinaion works like an if/then/else statement. Here's "
"another example of how you can use this pattern::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:982
msgid ""
"This assigns ``oddclass`` and ``evenclass`` class attributes to alternate"
" rows of the table, allowing them to be styled differently in HTML "
"output, for example."
msgstr ""

#: ../../zopebook/AdvZPT.rst:986
msgid ""
"Without this pattern you could also write two ``tr`` elements with "
"different conditions, one for even rows, and the other for odd rows."
msgstr ""

#: ../../zopebook/AdvZPT.rst:991
msgid "Using other Expression Types"
msgstr ""

#: ../../zopebook/AdvZPT.rst:993
msgid ""
"You can use other expression types inside of a Python expression.  Each "
"expression type has a corresponding function with the same name, "
"including: ``path()``, ``string()``, ``exists()``, and ``nocall()``.  "
"This allows you to write expressions such as::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1003
msgid ""
"The final example has a slightly different meaning than the path "
"expression, ``request/form/x | default``, since it will use the default "
"text if ``request/form/x`` doesn't exists *or* if it is false."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1009
msgid "Getting at Zope Objects"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1011
msgid ""
"Much of the power of Zope involves tying together specialized objects.  "
"Your Page Templates can use Scripts, SQL Methods, Catalogs, and custom "
"content objects.  In order to use these objects you have to know how to "
"get access to them within Page Templates."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1017
msgid ""
"Object properties are usually attributes, so you can get a template's "
"title with the expression ``template.title``. Most Zope objects support "
"acquisition, which allows you to get attributes from \"parent\" objects."
"  This means that the Python expression ``context.Control_Panel`` will "
"acquire the Control Panel object from the root Folder.  Object methods "
"are attributes, as in ``context.objectIds`` and ``request.set``.  Objects"
" contained in a Folder can be accessed as attributes of the Folder, but "
"since they often have Ids that are not valid Python identifiers, you "
"can't use the normal notation.  For example, you cannot access the "
"``penguin.gif`` object with the following Python expression::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1032
msgid "Instead, you must write::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1036
msgid "since Python doesn't support attribute names with periods."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1038
msgid ""
"Some objects, such as ``request``, ``modules``, and Zope Folders support "
"Python item access, for example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1045
msgid ""
"When you use item access on a Folder, it doesn't try to acquire the name,"
" so it will only succeed if there is actually an object with that Id "
"contained in the Folder."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1049
msgid ""
"As shown in previous chapters, path expressions allow you to ignore "
"details of how you get from one object to the next. Zope tries attribute "
"access, then item access.  You can write::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1056 ../../zopebook/AdvZPT.rst:1064
msgid "instead of::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1060
msgid "and::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1068
msgid ""
"The trade-off is that path expressions don't allow you to specify those "
"details.  For instance, if you have a form variable named \"get\", you "
"must write::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1074
msgid "since this path expression::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1078
msgid "will evaluate to the \"get\" *method* of the form dictionary."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1080
msgid ""
"If you prefer you can use path expressions inside Python expressions "
"using the ``path()`` function, as described above."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1084
msgid "Using Scripts"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1087
msgid ""
"Zope no longer ships with the PythonScripts Zope product by default. You "
"need to install ``Products.PythonScripts`` into yur Zope sandbox first."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1090
msgid ""
"Script objects are often used to encapsulate business logic and complex "
"data manipulation.  Any time that you find yourself writing lots of TAL "
"statements with complicated expressions in them, you should consider "
"whether you could do the work better in a Script. If you have trouble "
"understanding your template statements and expressions, then it's better "
"to simplify your Page Template and use Scripts for the complex stuff."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1099
msgid ""
"Each Script has a list of parameters that it expects to be given when it "
"is called.  If this list is empty, then you can use the Script by writing"
" a path expression.  Otherwise, you will need to use a Python expression "
"in order to supply the argument, like this::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1108
msgid ""
"If you want to return more than one item of data from a Script to a Page "
"Template, it is a good idea to return it in a dictionary.  That way, you "
"can define a variable to hold all the data, and use path expressions to "
"refer to each item.  For example, suppose the ``getPerson`` script "
"returns a dictionary with ``name`` and ``age`` keys::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1119
msgid "Of course, it's fine to return Zope objects and Python lists as well."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1123
msgid "Python Modules"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1125
msgid ""
"The Python language comes with a large number of modules, which provide a"
" wide variety of capabilities to Python programs.  Each module is a "
"collection of Python functions, data, and classes related to a single "
"purpose, such as mathematical calculations or regular expressions."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1131
msgid ""
"Several modules, including ``math`` and ``string``, are available in "
"Python expressions by default.  For example, you can get the value of pi "
"from the math module by writing ``python:math.pi``.  To access it from a "
"path expression, however, you need to use the ``modules`` variable, "
"``modules/math/pi``."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1138
msgid ""
"The ``string`` module is hidden in Python expressions by the ``string`` "
"expression type function, so you need to access it through the "
"``modules`` variable.  You can do this directly in an expression in which"
" you use it, or define a variable for it, like this::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1147
msgid ""
"In practice you'll rarely need to do this since you can use string "
"methods most of the time rather than having to rely on functions in the "
"string module."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1151
msgid ""
"Modules can be grouped into packages, which are simply a way of "
"organizing and naming related modules.  For instance, Zope's Python-based"
" Scripts are provided by a collection of modules in the \"PythonScripts\""
" subpackage of the Zope \"Products\" namespace package.  In particular, "
"the ``standard`` module in this package provides a number of useful "
"formatting functions. The full name of this module is "
"``Products.PythonScripts.standard``, so you could get access to it using "
"either of the following statements::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1163
msgid ""
"Many Python modules cannot be accessed from Page Templates or Scripts "
"unless you add Zope security assertions to them.  See the `Zope "
"Developer's Guide's security chapter "
"<https://zope.readthedocs.io/en/latest/zdgbook/Security.html>`_ for more "
"information on making more Python modules available to your templates and"
" scripts by using ``ModuleSecurityInfo``."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1171
msgid "Caching Templates"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1174
msgid ""
"In order to use a cache manager, install the package "
"``Products.StandardCacheManagers`` first."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1177
msgid ""
"While rendering Page Templates normally is quite fast, sometimes it's not"
" fast enough. For frequently accessed pages, or pages that take a long "
"time to render, you may want to trade some dynamic behavior for speed. "
"Caching lets you do this. For more information on caching see the \"Cache"
" Manager\" section of the chapter entitled `Zope Services "
"<ZopeServices.html>`_."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1184
msgid ""
"You can cache Page Templates using a cache manager in the same way that "
"you cache other objects. To cache a Page Template, you must associate it "
"with a cache manager. You can either do this by going to the *Cache* view"
" of your Page Template and selecting the cache manager (there must be one"
" in the acquisition path of the template for the *Cache* view to appear),"
" or by going to the *Associate* view of your cache manager and locating "
"your Page Template."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1192
msgid ""
"Here's an example of how to cache a Page Template. First create a Python-"
"based script name ``long.py`` with these contents::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1203
msgid ""
"The purpose of this script is to take up a noticeable amount of execution"
" time. Now create a Page Template that uses this script, for example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1213
msgid ""
"Now view this page. Notice how it takes a while to render. Now let's "
"radically improve its rendering time with caching.  Create a Ram Cache "
"Manager if you don't already have one. Make sure to create it within the "
"same folder as your Page Template, or in a higher level. Now visit the "
"*Cache* view of your Page Template. Choose the Ram Cache Manager you just"
" created and click *Save Changes*.  Click the *Cache Settings* link to "
"see how your Ram Cache Manager is configured.  By default, your cache "
"stores objects for one hour (3600 seconds). You may want to adjust this "
"number depending on your application. Now return to your Page Template "
"and view it again. It should take a while for it to render. Now reload "
"the page, and watch it render immediately. You can reload the page again "
"and again, and it will always render immediately since the page is now "
"cached."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1228
msgid ""
"If you change your Page Template, then it will be removed from the cache."
" So the next time you view it, it will take a while to render. But after "
"that it will render quickly since it will be cached again."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1233
msgid ""
"Caching is a simple but very powerful technique for improving "
"performance. You don't have to be a wizard to use caching, and it can "
"provide great speed-ups. It's well worth your time to use caching for "
"performance-critical applications."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1238
msgid ""
"For more information on caching in the context of Zope, see the chapter "
"entitled `Zope Services <ZopeServices.html>`_."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1242
msgid "Filesystem caching for Chameleon-based templates"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1244
msgid ""
"Zope 4 introduced the `Chameleon HTML/XML template engine "
"<https://chameleon.readthedocs.io/>`_ as new backend for Zope Page "
"Templates. The Chameleon templating engine can compile templates and "
"cache them on the file system for faster startup and execution."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1249
msgid ""
"File system caching is activated by setting an environment variable named"
" ``CHAMELEON_CACHE`` to the path of a folder on the filesystem where "
"Chameleon can write its compiled template representation."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1253
msgid ""
"Look for or add a section named ``environment`` in ``etc/zope.conf`` and "
"add a suitable filesystem path, for example::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1260
msgid "Make sure that folder exists before starting Zope."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1262
msgid ""
"How to configure Zope is explained in `Configuring Zope "
"<../operation.html>`_."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1265
msgid "Page Template Utilities"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1267
msgid ""
"Zope Page Templates are powerful but simple. They don't give you a lot of"
" convenience features for things like batching, drawing trees, sorting, "
"etc. The creators of Page Templates wanted to keep them simple. To "
"address these needs, Zope comes with utilities designed to enhance Page "
"Templates."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1275
msgid "Batching Large Sets of Information"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1277
msgid ""
"When a user queries a database and gets hundreds of results, it's often "
"better to show them several pages with only twenty results per page, "
"rather than putting all the results on one page. Breaking up large lists "
"into smaller lists is called *batching*."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1283
msgid ""
"Page Templates support batching by using a special ``Batch`` object that "
"comes from the ``ZTUtils`` utility module.  See `Appendix B: API "
"Reference`_, for more information on the ``ZTUtils`` Python module."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1288
msgid "Here's a simple example, showing how to create a ``Batch`` object::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1300
msgid ""
"This example renders a list with 10 items (in this case, the numbers 0 "
"through 9). The ``Batch`` object chops a long list up into groups or "
"batches. In this case it broke a one hundred item list up into batches of"
" ten items."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1305
msgid ""
"You can display a different batch of ten items by passing a different "
"start number::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1313
msgid ""
"This batch starts with the fourteenth item and ends with the twenty third"
" item. In other words, it displays the numbers 13 through 22. It's "
"important to notice that the batch ``start`` argument is the *index* of "
"the first item. Indexes count from zero, rather than from one. So index "
"13 points to the fourteenth item in the sequence. Python uses indexes to "
"refer to list items."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1321
msgid ""
"Normally when you use batches you'll want to include navigation elements "
"on the page to allow users to go from batch to batch. Here's a full-blow "
"batching example that shows how to navigate between batches::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1358
msgid ""
"Define a Script (Python) with the name getEmployees in the same folder "
"with the following body (no parameters are necessary)::"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1368
msgid ""
"This example iterates over batches of results from the ``getEmployees`` "
"method. It draws a *previous* and a *next* link as necessary to allow you"
" to page through all the results a batch at a time.  The batch size in "
"this case is 3."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1373
msgid ""
"Take a look at the ``tal:define`` statement on the ``body`` element. It "
"defines a bunch of batching variables. The ``employees`` variable is a "
"list of employee objects returned by the ``getEmployees`` Script.  It is "
"not very big now, but it could grow fairly large (especially if it were a"
" call into a SQL Method of *real* employees). The second variable, "
"``start``, is either set to the value of ``request/start`` or to zero if "
"there is no ``start`` variable in the request.  The ``start`` variable "
"keeps track of where you are in the list of employees. The ``batch`` "
"variable is a batch of ten items from the lists of employees. The batch "
"starts at the location specified by the ``start`` variable. The "
"``previous`` and ``next`` variables refer to the previous and next "
"batches (if any). Since all these variables are defined on the ``body`` "
"element, they are available to all elements inside the body."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1389
msgid ""
"Next let's look at the navigation links. They create hyper links to "
"browse previous and next batches. The ``tal:condition`` statement first "
"tests to see if there is a previous and next batch. If there is a "
"previous or next batch, then the link is rendered, otherwise there is no "
"link. The ``tal:attributes`` statement creates a link to the previous and"
" next batches. The link is simply the URL or the current page "
"(``request/URL0``) along with a query string indicating the start index "
"of the batch. For example, if the current batch starts with index 10, "
"then the previous batch will start with an index of 0. The ``first`` "
"variable of a batch gives its starting index, so in this case, "
"``previous.start`` would be 0."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1402
msgid ""
"It's not important to fully understand the workings of this example. "
"Simply copy it, or use a batching example created by the *Z Search "
"Interface*. Later when you want to do more complex batching you can "
"experiment by changing the example code. Don't forget to consult "
"`Appendix B: API Reference`_ for more information on the 'ZTUtils' module"
" and 'Batch' objects."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1410
msgid "Miscellaneous Utilities"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1412
msgid ""
"Zope provides a couple Python modules which may come in handy when using "
"Page Templates. The ``string``, ``math``, and ``random`` modules can be "
"used in Python expressions for string formatting, math function, and "
"pseudo-random number generation. These same modules are available in "
"Python-based scripts."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1418
msgid ""
"The ``Products.PythonScripts.standard`` module is designed to provide "
"utilities to Python-based scripts, but it's also useful for Page "
"Templates. It includes various string and number formatting functions."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1423
msgid ""
"As mentioned earlier in the chapter, the ``sequence`` module provides a "
"handy ``sort`` function."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1426
msgid ""
"Finally the ``AccessControl`` module includes a function and a class "
"which you'll need if you want to test access and to get the authenticated"
" user."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1430
msgid "See `Appendix B: API Reference`_ for more information on these utilities."
msgstr ""

#: ../../zopebook/AdvZPT.rst:1434
msgid "Conclusion"
msgstr ""

#: ../../zopebook/AdvZPT.rst:1436
msgid ""
"This chapter covers some useful and some obscure nooks and crannies of "
"Page Templates, and after reading it you may feel a bit overwhelmed. "
"Don't worry, you don't need to know everything in this chapter to "
"effectively use Page Templates. You should understand the different path "
"types and macros, but you can come back to the rest of the material when "
"you need it. The advanced features that you've learned about in this "
"chapter are there for you if and when you need them."
msgstr ""

