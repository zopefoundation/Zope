# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2023, The Zope developer community
# This file is distributed under the same license as the Zope package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zope 5.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../zdgbook/Acquisition.rst:3
msgid "Acquisition"
msgstr ""

#: ../../zdgbook/includes/zope2_notice.rst:3
msgid "This document was written for Zope 2."
msgstr ""

#: ../../zdgbook/Acquisition.rst:7
msgid ""
"Acquisition is a mechanism that allows objects to obtain attributes from "
"their environment.  It is similar to inheritance, except that, rather "
"than searching an inheritance hierarchy to obtain attributes, a "
"containment hierarchy is traversed."
msgstr ""

#: ../../zdgbook/Acquisition.rst:14
msgid "Introductory Example"
msgstr ""

#: ../../zdgbook/Acquisition.rst:16
msgid ""
"Zope implements acquisition with \"Extension Class\" mix-in classes. To "
"use acquisition your classes must inherit from an acquisition base class."
" For example::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:44
msgid ""
"The class 'A' inherits acquisition behavior from 'Acquisition.Implicit'."
"  The object, 'a', \"has\" the color of objects 'c' and 'd' when it is "
"accessed through them, but it has no color by itself.  The object 'a' "
"obtains attributes from its environment, where its environment is defined"
" by the access path used to reach 'a'."
msgstr ""

#: ../../zdgbook/Acquisition.rst:52
msgid "Acquisition Wrappers"
msgstr ""

#: ../../zdgbook/Acquisition.rst:54
msgid ""
"When an object that supports acquisition is accessed through an extension"
" class instance, a special object, called an acquisition wrapper, is "
"returned.  In the example above, the expression 'c.a' returns an "
"acquisition wrapper that contains references to both 'c' and 'a'.  It is "
"this wrapper that performs attribute lookup in 'c' when an attribute "
"cannot be found in 'a'."
msgstr ""

#: ../../zdgbook/Acquisition.rst:61
msgid ""
"Acquisition wrappers provide access to the wrapped objects through the "
"attributes 'aq_parent', 'aq_self', 'aq_base'.  In the example above, the "
"expressions::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:67
msgid "and::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:72
msgid "both evaluate to true, but the expression::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:76
msgid ""
"evaluates to false, because the expression 'c.a' evaluates to an "
"acquisition wrapper around 'c' and 'a', not 'a' itself."
msgstr ""

#: ../../zdgbook/Acquisition.rst:79
msgid ""
"The attribute 'aq_base' is similar to 'aq_self'.  Wrappers may be nested "
"and 'aq_self' may be a wrapped object.  The 'aq_base' attribute is the "
"underlying object with all wrappers removed."
msgstr ""

#: ../../zdgbook/Acquisition.rst:83
msgid ""
"You can manually wrap an instance of an object that inherits from an "
"acquisition base class by using its '__of__' method. For example::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:97
msgid ""
"The expression 'b.__of__(a)' wraps 'b' in an acquisition wrapper "
"explicitly, and returns the acquisition wrapper.  The 'color' attrribute "
"of 'a' is found via acquisition when this expression is executed."
msgstr ""

#: ../../zdgbook/Acquisition.rst:104
msgid "Explicit and Implicit Acquisition"
msgstr ""

#: ../../zdgbook/Acquisition.rst:106
msgid ""
"Two styles of acquisition are supported: implicit and explicit "
"acquisition."
msgstr ""

#: ../../zdgbook/Acquisition.rst:110
msgid "Implicit acquisition"
msgstr ""

#: ../../zdgbook/Acquisition.rst:112
msgid ""
"Implicit acquisition is so named because it searches for attributes from "
"the environment automatically whenever an attribute cannot be obtained "
"directly from an object or through inheritance."
msgstr ""

#: ../../zdgbook/Acquisition.rst:117
msgid ""
"An attribute can be implicitly acquired if its name does not begin with "
"an underscore."
msgstr ""

#: ../../zdgbook/Acquisition.rst:120
msgid ""
"To support implicit acquisition, your class should inherit from the mix-"
"in class 'Acquisition.Implicit'."
msgstr ""

#: ../../zdgbook/Acquisition.rst:124
msgid "Explicit Acquisition"
msgstr ""

#: ../../zdgbook/Acquisition.rst:126
msgid ""
"When explicit acquisition is used, attributes are not automatically "
"obtained from the environment.  Instead, the method 'aq_acquire' must be "
"used. For example::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:132
msgid ""
"To support explicit acquisition, your class should inherit from the mix-"
"in class 'Acquisition.Explicit'."
msgstr ""

#: ../../zdgbook/Acquisition.rst:136
msgid "Controlling Acquisition"
msgstr ""

#: ../../zdgbook/Acquisition.rst:138
msgid ""
"A class (or instance) can provide attribute by attribute control over "
"acquisition.  Your should subclass from 'Acquisition.Explicit', and set "
"all attributes that should be acquired to the special value "
"'Acquisition.Acquired'.  Setting an attribute to this value also allows "
"inherited attributes to be overridden with acquired ones.  For example::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:151
msgid ""
"The *only* attributes that are automatically acquired from containing "
"objects are 'color', and '__roles__'.  Note that the '__roles__' "
"attribute is acquired even though its name begins with an underscore. In "
"fact, the special 'Acquisition.Acquired' value can be used in "
"'Acquisition.Implicit' objects to implicitly acquire selected objects "
"that smell like private objects."
msgstr ""

#: ../../zdgbook/Acquisition.rst:158
msgid ""
"Sometimes, you want to dynamically make an implicitly acquiring object "
"acquire explicitly. You can do this by getting the object's 'aq_explicit'"
" attribute. This attribute provides the object with an explicit wrapper "
"that places the original implicit wrapper."
msgstr ""

#: ../../zdgbook/Acquisition.rst:164
msgid "Filtered Acquisition"
msgstr ""

#: ../../zdgbook/Acquisition.rst:166
msgid ""
"The acquisition method, 'aq_acquire', accepts two optional arguments. The"
" first of the additional arguments is a \"filtering\" function that is "
"used when considering whether to acquire an object. The second of the "
"additional arguments is an object that is passed as extra data when "
"calling the filtering function and which defaults to 'None'.  The filter "
"function is called with five arguments:"
msgstr ""

#: ../../zdgbook/Acquisition.rst:173
msgid "The object that the 'aq_acquire' method was called on,"
msgstr ""

#: ../../zdgbook/Acquisition.rst:175 ../../zdgbook/Acquisition.rst:378
msgid "The object where an object was found,"
msgstr ""

#: ../../zdgbook/Acquisition.rst:177
msgid "The name of the object, as passed to 'aq_acquire',"
msgstr ""

#: ../../zdgbook/Acquisition.rst:179 ../../zdgbook/Acquisition.rst:382
msgid "The object found, and"
msgstr ""

#: ../../zdgbook/Acquisition.rst:181
msgid "The extra data passed to 'aq_acquire'."
msgstr ""

#: ../../zdgbook/Acquisition.rst:183 ../../zdgbook/Acquisition.rst:386
msgid ""
"If the filter returns a true object that the object found is returned, "
"otherwise, the acquisition search continues."
msgstr ""

#: ../../zdgbook/Acquisition.rst:186
msgid "For example, in::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:216
msgid ""
"The filtered acquisition in the last line skips over the first attribute "
"it finds with the name 'p', because the attribute doesn't satisfy the "
"condition given in the filter. The output of the last line is::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:223
msgid "Filtered acquisition is rarely used in Zope."
msgstr ""

#: ../../zdgbook/Acquisition.rst:226
msgid "Acquiring from Context"
msgstr ""

#: ../../zdgbook/Acquisition.rst:228
msgid ""
"Normally acquisition allows objects to acquire data from their "
"containers. However an object can acquire from objects that aren't its "
"containers."
msgstr ""

#: ../../zdgbook/Acquisition.rst:232
msgid ""
"Most of the example's we've seen so far show establishing of an "
"acquisition *context* using 'getattr' symanitics. For example, 'a.b' is a"
" reference to 'b' in the context of 'a'."
msgstr ""

#: ../../zdgbook/Acquisition.rst:237
msgid ""
"You can also manuallyset acquisition context using the '__of__' method.  "
"For example::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:247
msgid ""
"In this case, 'a' does not contain 'b', but it is put in 'b''s context "
"using the '__of__' method."
msgstr ""

#: ../../zdgbook/Acquisition.rst:250
msgid ""
"Here's another subtler example that shows how you can construct an "
"acquisition context that includes non-container objects::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:266
msgid ""
"Even though 'b' does not contain 'x', 'x' can acquire the 'color' "
"attribute from 'b'. This works because in this case, 'x' is accessed in "
"the context of 'b' even though it is not contained by 'b'."
msgstr ""

#: ../../zdgbook/Acquisition.rst:270
msgid ""
"Here acquisition context is defined by the objects used to access another"
" object."
msgstr ""

#: ../../zdgbook/Acquisition.rst:274
msgid "Containment Before Context"
msgstr ""

#: ../../zdgbook/Acquisition.rst:276
msgid ""
"If in the example above suppose both 'a' and 'b' have an 'color' "
"attribute::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:288
msgid ""
"Why does 'a.b.x.color' acquire 'color' from 'a' and not from 'b'? The "
"answer is that an object acquires from its containers before non-"
"containers in its context."
msgstr ""

#: ../../zdgbook/Acquisition.rst:292
msgid ""
"To see why consider this example in terms of expressions using the "
"'__of__' method::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:301
msgid ""
"Keep in mind that attribute lookup in a wrapper is done by trying to look"
" up the attribute in the wrapped object first and then in the parent "
"object.  So in the expressions above proceeds from left to right."
msgstr ""

#: ../../zdgbook/Acquisition.rst:307
msgid ""
"The upshot of these rules is that attributes are looked up by containment"
" before context."
msgstr ""

#: ../../zdgbook/Acquisition.rst:310
msgid ""
"This rule holds true also for more complex examples. For example, "
"'a.b.c.d.e.f.g.attribute' would search for 'attribute' in 'g' and all its"
" containers first. (Containers are searched in order from the innermost "
"parent to the outermost container.) If the attribute is not found in g or"
" any of its containers, then the search moves to 'f' and all its "
"containers, and so on."
msgstr ""

#: ../../zdgbook/Acquisition.rst:318
msgid "Additional Attributes and Methods"
msgstr ""

#: ../../zdgbook/Acquisition.rst:320
msgid ""
"You can use the special method 'aq_inner' to access an object wrapped "
"only by containment. So in the example above::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:325
msgid "is equivalent to::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:329
msgid ""
"You can find out the acquisition context of an object using the "
"'aq_chain' method like so::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:334
msgid ""
"You can find out if an object is in the acquisition context of another "
"object using the 'aq_inContextOf' method. For example::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:340
msgid ""
"You can also pass an additional argument to 'aq_inContextOf' to indicate "
"whether to only check containment rather than the full acquisition "
"context. For example::"
msgstr ""

#: ../../zdgbook/Acquisition.rst:346
msgid ""
"Note: as of this writing the 'aq_inContextOf' examples don't work. "
"According to Jim, this is because 'aq_inContextOf' works by comparing "
"object pointer addresses, which (because they are actually different "
"wrapper objects) doesn't give you the expected results. He acknowledges "
"that this behavior is controversial, and says that there is a collector "
"entry to change it so that you would get the answer you expect in the "
"above. (We just need to get to it)."
msgstr ""

#: ../../zdgbook/Acquisition.rst:356
msgid "Acquisition Module Functions"
msgstr ""

#: ../../zdgbook/Acquisition.rst:358
msgid ""
"In addition to using acquisition attributes and methods directly on "
"objects you can use similar functions defined in the 'Acquisition' "
"module. These functions have the advantage that you don't need to check "
"to make sure that the object has the method or attribute before calling "
"it."
msgstr ""

#: ../../zdgbook/Acquisition.rst:364
msgid ""
"'aq_acquire(object, name [, filter, extra, explicit, default, "
"containment])' -- Acquires an object with the given name."
msgstr ""

#: ../../zdgbook/Acquisition.rst:366
msgid ""
"This function can be used to explictly acquire when using explicit "
"acquisition and to acquire names that wouldn't normally be acquired."
msgstr ""

#: ../../zdgbook/Acquisition.rst:369
msgid "The function accepts a number of optional arguments:"
msgstr ""

#: ../../zdgbook/Acquisition.rst:371
msgid ""
"'filter' -- A callable filter object that is used to decide if an object "
"should be acquired."
msgstr ""

#: ../../zdgbook/Acquisition.rst:374
msgid "The filter is called with five arguments:"
msgstr ""

#: ../../zdgbook/Acquisition.rst:376
msgid "The object that the aq_acquire method was called on,"
msgstr ""

#: ../../zdgbook/Acquisition.rst:380
msgid "The name of the object, as passed to aq_acquire,"
msgstr ""

#: ../../zdgbook/Acquisition.rst:384
msgid "The extra argument passed to aq_acquire."
msgstr ""

#: ../../zdgbook/Acquisition.rst:389
msgid "'extra' -- extra data to be passed as the last argument to the filter."
msgstr ""

#: ../../zdgbook/Acquisition.rst:392
msgid ""
"'explicit' -- A flag (boolean value) indicating whether explicit "
"acquisition should be used. The default value is true.  If the flag is "
"true, then acquisition will proceed regardless of whether wrappers "
"encountered in the search of the acquisition hierarchy are explicit or "
"implicit wrappers. If the flag is false, then parents of explicit "
"wrappers are not searched."
msgstr ""

#: ../../zdgbook/Acquisition.rst:399
msgid ""
"This argument is useful if you want to apply a filter without overriding "
"explicit wrappers."
msgstr ""

#: ../../zdgbook/Acquisition.rst:402
msgid "'default' -- A default value to return if no value can be acquired."
msgstr ""

#: ../../zdgbook/Acquisition.rst:404
msgid ""
"'containment' -- A flag indicating whether the search should be limited "
"to the containment hierarchy."
msgstr ""

#: ../../zdgbook/Acquisition.rst:407
msgid "In addition, arguments can be provided as keywords."
msgstr ""

#: ../../zdgbook/Acquisition.rst:409
msgid "'aq_base(object)' -- Return the object with all wrapping removed."
msgstr ""

#: ../../zdgbook/Acquisition.rst:411
msgid ""
"'aq_chain(object [, containment])' -- Return a list containing the object"
" and it's acquisition parents. The optional argument, 'containment', "
"controls whether the containment or access hierarchy is used."
msgstr ""

#: ../../zdgbook/Acquisition.rst:416
msgid ""
"'aq_get(object, name [, default, containment])' -- Acquire an attribute, "
"name. A default value can be provided, as can a flag that limits search "
"to the containment hierarchy."
msgstr ""

#: ../../zdgbook/Acquisition.rst:420
msgid ""
"'aq_inner(object)' -- Return the object with all but the innermost layer "
"of wrapping removed."
msgstr ""

#: ../../zdgbook/Acquisition.rst:423
msgid ""
"'aq_parent(object)' -- Return the acquisition parent of the object or "
"'None' if the object is unwrapped."
msgstr ""

#: ../../zdgbook/Acquisition.rst:426
msgid ""
"'aq_self(object)' -- Return the object with one layer of wrapping "
"removed, unless the object is unwrapped, in which case the object is "
"returned."
msgstr ""

#: ../../zdgbook/Acquisition.rst:430
msgid ""
"In most cases it is more convenient to use these module functions instead"
" of the acquisition attributes and methods directly."
msgstr ""

#: ../../zdgbook/Acquisition.rst:434
msgid "Acquisition and Methods"
msgstr ""

#: ../../zdgbook/Acquisition.rst:436
msgid ""
"Python methods of objects that support acquisition can use acquired "
"attributes.  When a Python method is called on an object that is wrapped "
"by an acquisition wrapper, the wrapper is passed to the method as the "
"first argument.  This rule also applies to user-defined method types and "
"to C methods defined in pure mix-in classes."
msgstr ""

#: ../../zdgbook/Acquisition.rst:442
msgid ""
"Unfortunately, C methods defined in extension base classes that define "
"their own data structures, cannot use aquired attributes at this time.  "
"This is because wrapper objects do not conform to the data structures "
"expected by these methods. In practice, you will seldom find this a "
"problem."
msgstr ""

#: ../../zdgbook/Acquisition.rst:449
msgid "Conclusion"
msgstr ""

#: ../../zdgbook/Acquisition.rst:451
msgid ""
"Acquisition provides a powerful way to dynamically share information "
"between objects. Zope using acquisition for a number of its key features "
"including security, object publishing, and DTML variable lookup. "
"Acquisition also provides an elegant solution to the problem of circular "
"references for many classes of problems. While acquisition is powerful, "
"you should take care when using acquisition in your applications. The "
"details can get complex, especially with the differences between "
"acquiring from context and acquiring from containment."
msgstr ""

