# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2023, The Zope developer community
# This file is distributed under the same license as the Zope package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zope 5.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-16 11:50+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../zdgbook/ComponentsAndInterfaces.rst:3
msgid "Components and Interfaces"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:5
msgid ""
"Zope uses a component architecture internally in many places.  Zope "
"components are nothing but Python objects with interfaces that describe "
"them.  As a Zope developer you can use interfaces right now to build your"
" Zope components."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:11
msgid "Zope Components"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:13
msgid ""
"Components are objects that are associated with interfaces.  An interface"
" is a Python object that describes how you work with other Python "
"objects.  In this chapter, you'll see some simple examples of creating "
"components, and a description of interfaces and how they work."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:19
msgid ""
"Here is a very simple component that says hello.  Like all components, "
"this one consists of two pieces, an interface and an implementation::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:37
msgid ""
"Let's take a look at this step by step.  Here, you see two Python class "
"statements.  The first class statement creates the *interface*, and the "
"second class statement creates the *implementation*."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:41
msgid ""
"The first class statement creates the ``IHello`` interface.  This "
"interface describes one method, called ``hello``.  Notice that there is "
"no implementation for this method. Interfaces do not define behavior, "
"they just describe a specification."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:46
msgid ""
"The second ``class`` statement creates the ``HelloComponent`` class. This"
" class is the actual component that *does* what ``IHello`` *describes*.  "
"This is usually referred to as the *implementation* of ``IHello``.  In "
"order for you to know what interfaces ``HelloComponent`` implements, it "
"must somehow associate itself with an interface.  The ``implementer`` "
"decorator above the class does just that.  It says, \"I implement these "
"interfaces\".  In this case, ``HelloComponent`` asserts that it "
"implements one interface, ``IHello``."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:56
msgid ""
"The interface describes how you would work with the object, but it "
"doesn't dictate how that description is implemented.  For example, here's"
" a more complex implementation of the ``Hello`` interface::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:71
msgid ""
"This component contacts a remote server and gets its hello greeting from "
"a remote component."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:74
msgid ""
"And that's all there is to components, really.  The rest of this chapter "
"describes interfaces and how you can work with them from the perspective "
"of components.  In Chapter 5, we'll put all this together into a Zope "
"product."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:80
msgid "Python Interfaces"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:82
msgid ""
"An interface describes the behavior of an object by containing useful "
"information about the object.  This information includes:"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:85
msgid ""
"Prose documentation about the object.  In Python terms, this is called "
"the \"doc string\" of the interface.  In this element, you describe how "
"the object works in prose language and any other useful information about"
" the object."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:90
msgid ""
"Descriptions of attributes.  Attribute descriptions include the name of "
"the attribute and prose documentation describing the attributes usage."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:94
msgid "Descriptions of methods.  Method descriptions can include:"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:96
msgid "Prose \"doc string\" documentation about the method and its usage."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:98
msgid ""
"A sequence of parameter objects that describes the parameters expected by"
" the method."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:101
msgid ""
"Optional tagged data.  Interface objects (and their attributes, methods, "
"and method parameters) can have optional, application specific tagged "
"data associated with them.  Examples uses for this are security "
"assertions, pre/post conditions, unit tests, and other possible "
"information you may want to associate with an Interface or its "
"attributes."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:108
msgid ""
"Not all of this information is mandatory.  For example, you may only want"
" the methods of your interface to have prose documentation and not "
"describe the arguments of the method in exact detail.  Interface objects "
"are flexible and let you give or take any of these components."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:115
msgid "Why Use Interfaces?"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:117
msgid ""
"Interfaces solve a number of problems that arise while developing large "
"systems with lots of developers."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:120
msgid ""
"Developers waste a lot of time looking at the source code of your system "
"to figure out how objects work.  This is even worse if someone else has "
"already wasted their time doing the same thing."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:124
msgid ""
"Developers who are new to your system may misunderstand how an object "
"works, causing, and possibly propagating, usage errors."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:127
msgid ""
"Because an object's interface is inferred from the source, developers may"
" end up using methods and attributes that are meant for \"internal use "
"only\"."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:131
msgid ""
"Code inspection can be hard, and very discouraging to novice programmers "
"trying to understand code written by gurus."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:134
msgid ""
"Interfaces try to solve these problems by providing a way for you to "
"describe how to use an object, and a mechanism for discovering that "
"description."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:139
msgid "Creating Interfaces"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:141
msgid ""
"The first step to creating a component, as you've been shown, is to "
"create an interface."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:144
msgid ""
"Interface objects can be conveniently constructed using the Python "
"``class`` statement.  Keep in mind that this syntax can be a little "
"misleading, because interfaces are *not* classes.  It is important to "
"understand that using Python's class syntax is just a convenience, and "
"that the resulting object is an *interface*, not a class."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:150
msgid ""
"To create an interface object using Python's class syntax, create a "
"Python class that subclasses from ``zope.interface.Interface``::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:160
msgid ""
"This interface does not implement behavior for its methods, it just "
"describes an interface that a typical \"Hello\" object would realize. By "
"subclassing ``zope.interface.Interface``, the resulting object ``Hello`` "
"is an interface object. The Python interpreter confirms this::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:169
msgid ""
"Now, you can associate the ``Hello`` Interface with your new concrete "
"class in which you define your user behavior.  For example::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:179
msgid ""
"This new class, ``HelloComponent`` is a concrete class that implements "
"the ``IHello`` interface.  A class can realize more than one interface.  "
"For example, say you had an interface called ``IItem`` that described how"
" an object worked as an item in a \"Container\" object.  If you wanted to"
" assert that ``HelloComponent`` instances realized the ``IItem`` "
"interface as well as ``IHello``, you can provide a sequence of Interface "
"objects to the ``HelloComponent`` class::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:193
msgid "The Interface Model"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:195
msgid ""
"Interfaces can extend other interfaces.  For example, let's extend the "
"``IHello`` interface by adding an additional method::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:205
msgid ""
"``ISmartHello`` extends the ``IHello`` interface.  It does this by using "
"the same syntax a class would use to subclass another class."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:208
msgid ""
"Now, you can ask the ``ISmartHello`` for a list of the interfaces it "
"extends with ``getBases``::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:214
msgid ""
"An interface can extend any number of other interfaces, and ``getBases`` "
"will return that list of interfaces for you.  If you want to know if "
"``ISmartHello`` extends any other interface, you could call ``getBases`` "
"and search through the list, but a convenience method called ``extends`` "
"is provided that returns true or false for this purpose::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:228
msgid ""
"Here you can see ``extends`` can be used to determine if one interface "
"extends another."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:231
msgid ""
"You may notice a similarity between interfaces extending from other "
"interfaces and classes sub-classing from other classes.  This *is* a "
"similar concept, but the two should not be considered equal.  There is no"
" assumption that classes and interfaces exist in a one to one "
"relationship; one class may implement several interfaces, and a class may"
" not implement its base classes's interfaces."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:238
msgid ""
"The distinction between a class and an interface should always be kept "
"clear.  The purpose of a class is to share the implementation of how an "
"object works.  The purpose of an interface is to document how to work "
"*with* an object, not how the object is implemented.  It is possible to "
"have several different classes with very different implementations "
"realizing the same interface.  Because of this, interfaces and classes "
"should never be confused."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:248
msgid "Querying an Interface"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:250
msgid ""
"Interfaces can be queried for information.  The simplest case is to ask "
"an interface the names of all the various interface items it describes.  "
"From the Python interpreter, for example, you can walk right up to an "
"interface and ask it for its *names*::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:258
msgid ""
"Interfaces can also give you more interesting information about their "
"items.  Interface objects can return a list of '(name, description)' "
"tuples about their items by calling the ``namesAndDescriptions`` method."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:263
#: ../../zdgbook/ComponentsAndInterfaces.rst:292
msgid "For example::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:269
msgid ""
"You cannot access the `Method` object by index, as "
"``namesAndDescriptions`` returns a dict_view."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:272
msgid "You can either use `list` or `next` and `iter` on the result."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:274
msgid ""
"As you can see, the \"description\" of the Interface's item is a `Method`"
" object.  Description objects can be either `Attribute` or `Method` "
"objects.  `Attribute`, `Method` and `Interface` objects implement the "
"following interface::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:283
msgid ""
"`Method` objects provide a way to describe rich meta-data about Python "
"methods. `Method` objects have the following methods::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:304
msgid ""
"You can use `getSignatureInfo` to find out the names and types of the "
"method parameters."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:309
msgid "Checking Implementation"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:311
msgid ""
"You can ask an interface if a certain class that you hand it implements "
"that interface.  For example, say you want to know if the "
"``HelloComponent`` class implements ``IHello``::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:317
msgid ""
"This is a true expression.  If you had an instance of ``HelloComponent``,"
" you can also ask the interface if that instance implements the "
"interface::"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:323
msgid ""
"This would also return true if ``my_hello_instance`` was an instance of "
"``HelloComponent``, or any other object of a class that implemented the "
"*IHello* interface."
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:328
msgid "Conclusion"
msgstr ""

#: ../../zdgbook/ComponentsAndInterfaces.rst:330
msgid ""
"Interfaces provide a simple way to describe your Python objects.  By "
"using interfaces you document capabilities of objects."
msgstr ""

