# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2009-2023, The Zope developer community
# This file is distributed under the same license as the Zope package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Zope 5.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-21 02:36+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Takeaki Matsunaga\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../zdgbook/TestingAndDebugging.rst:3
msgid "Testing and Debugging"
msgstr ""

#: ../../zdgbook/includes/zope2_notice.rst:3
msgid "This document was written for Zope 2."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:7
msgid ""
"As you develop Zope applications you may run into problems.  This chapter"
" covers debugging and testing techniques that can help you. The Zope "
"debugger allow you to peek inside a running process and find exactly what"
" is going wrong.  Unit testing allows you to automate the testing process"
" to ensure that your code still works correctly as you change it.  "
"Finally, Zope provides logging facilities which allow you to emit "
"warnings and error messages."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:17
msgid "Debugging"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:19
msgid ""
"Zope provides debugging information through a number of sources.  It also"
" allows you a couple avenues for getting information about Zope as it "
"runs."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:24
msgid "Product Refresh Settings"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:26
msgid ""
"As of Zope 2.4 there is a *Refresh* view on all Control Panel Products.  "
"Refresh allows you to reload your product's modules as you change them, "
"rather than having to restart Zope to see your changes. The *Refresh* "
"view provides the same debugging functionality previously provided by "
"Shane Hathaway's Refresh Product."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:32
msgid ""
"To turn on product refresh capabilities place a 'refresh.txt' file in "
"your product's directory.  Then visit the *Refresh* view of your product "
"in the management interface.  Here you can manually reload your product's"
" modules with the *Refresh this product* button.  This allows you to "
"immediately see the effect of your changes, without restarting Zope.  You"
" can also turn on automatic refreshing which causes Zope to frequently "
"check for changes to your modules and refresh your product when it "
"detects that your files have changed. Since automatic refresh causes Zope"
" to run more slowly, it is a good idea to only turn it on for a few "
"products at a time."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:44
msgid "Debug Mode"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:46
msgid ""
"Normally, debug mode is set using the '-D' switch when starting Zope. "
"This mode reduces the performance of Zope a little bit.  Debug model has "
"a number of wide ranging effects:"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:50
msgid "Tracebacks are shown on the browser when errors are raised."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:52
msgid ""
"External Methods and DTMLFile objects are checked to see if they have "
"been modified every time they are called.  If modified, they are "
"reloaded."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:56
msgid ""
"Zope will not fork into the background in debug mode, instead, it will "
"remain attached to the terminal that started it and the main logging "
"information will be redirected to that terminal."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:60
msgid ""
"By using debug mode and product refresh together you will have little "
"reason to restart Zope while developing."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:64
msgid "The Python Debugger"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:66
msgid ""
"Zope is integrated with the Python debugger (pdb).  The Python debugger "
"is pretty simple as command line debuggers go, and anyone familiar with "
"other popular command line debuggers (like gdb) will feel right at home "
"in pdb."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:71
msgid ""
"For an introduction to pdb see the standard `pdb documentation "
"<https://docs.python.org/library/pdb.html>`_ ."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:74
msgid "There are a number of ways to debug a Zope process:"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:77
msgid "o You can shut down the Zope server and simulate a request on the"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:77
msgid "command line."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:79
msgid "o You can run a special ZEO client that debugs a running server."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:82
msgid "o You can run Zope in debug model and enter the debugger"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:82
msgid "through Zope's terminal session."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:84
msgid ""
"The first method is an easy way to debug Zope if you are not running ZEO."
"  First, you must first shut down the Zope process.  It is not possible "
"to debug Zope in this way and run it at the same time. Starting up the "
"debugger this way will by default start Zope in single threaded mode."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:90
msgid ""
"For most Zope developer's purposes, the debugger is needed to debug some "
"sort of application level programming error.  A common scenario is when "
"developing a new product for Zope.  Products extend Zope's functionality "
"but they also present the same kind of debugging problems that are "
"commonly found in any programming environment.  It is useful to have an "
"existing debugging infrastructure to help you jump immediately to your "
"new object and debug it and play with it directly in pdb.  The Zope "
"debugger lets you do this."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:99
msgid ""
"In reality, the \"Zope\" part of the Zope debugger is actually just a "
"handy way to start up Zope with some pre-configured break points and to "
"tell the Python debugger where in Zope you want to start debugging."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:105
msgid "Simulating HTTP Requests"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:107
msgid ""
"Now for an example. Remember, for this example to work, you *must* shut "
"down Zope.  Go to your Zope's 'lib/python' directory and fire up Python "
"and import 'Zope' and 'ZPublisher'::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:118
msgid ""
"Here you have run the Python interpreter (which is where using the "
"debugger takes place) and imported two modules, 'Zope' and 'ZPublisher'."
"  If Python complains about an 'ImportError' and not being able to find "
"either module, then you are probably in the wrong directory, or you have "
"not compiled Zope properly.  If you get this message::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:128
msgid ""
"This tells you that Zope is currently running.  Shutdown Zope and try "
"again."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:131
msgid ""
"The 'Zope' module is the main Zope application module.  When you import "
"'Zope' it sets up Zope.  'ZPublisher' is the Zope ORB.  See Chapter 2 for"
" more information about 'ZPublisher'."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:135
msgid ""
"You can use the 'ZPublisher.Zope' function to simulate an HTTP request.  "
"Pass the function a URL relative the your root Zope object. Here is an "
"example of how to simulate an HTTP request from the debugger::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:153
msgid ""
"If you look closely, you will see that the content returned is *exactly* "
"what is returned when you call your root level object through HTTP, "
"including all the HTTP headers."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:157
msgid ""
"Keep in mind that calling Zope this way does NOT involve a web server.  "
"No ports are opened. In fact, this is just an interpreter front end to "
"the same application code the WSGI server *does* call."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:163
msgid "Interactive Debugging"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:165
msgid ""
"Debugging involves publishing a request up to a point where you think "
"it's failing, and then inspecting the state of your variables and "
"objects.  The easy part is the actual inspection, the hard part is "
"getting your program to stop at the right point."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:170
msgid ""
"So, for the sake our example, let's say that you have a 'News' object "
"which is defined in a Zope Product called 'ZopeNews', and is located in "
"the 'lib/python/Products/ZopeNews' directory.  The class that defines the"
" 'News' instance is also called 'News', and is defined in the 'News.py' "
"module in your product."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:176
msgid ""
"Therefore, from Zope's perspective the fully qualified name of your class"
" is 'Products.ZopeNews.News.News'.  All Zope objects have this kind of "
"fully qualified name.  For example, the 'ZCatalog' class can be found in "
"'Products.ZCatalog.ZCatalog.ZCatalog' (The redundancy is because the "
"product, module, and class are all named 'ZCatalog')."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:182
msgid ""
"Now let's create an example method to debug.  You want your news object "
"to have a 'postnews' method, that posts news::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:195
msgid ""
"You may notice that there's something wrong with the 'postnews' method.  "
"The method assigns 'news' to an instance variable, but it does nothing "
"with 'author'.  If the 'quote' method is called, it will raise an "
"'AttributeError' when it tries to look up the name 'self.author'.  "
"Although this is a pretty obvious goof, we'll use it to illustrate using "
"the debugger to fix it."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:202
msgid ""
"Running the debugger is done in a very similar way to how you called Zope"
" through the python interpreter before, except that you introduce one new"
" argument to the call to 'Zope'::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:214
msgid ""
"Here, you call Zope from the interpreter, just like before, but there are"
" two differences.  First, you call the 'postnews' method with an argument"
" using the URL, '/News/postnews?new=blah'.  Second, you provided a new "
"argument to the Zope call, 'd=1'.  The 'd' argument, when true, causes "
"Zope to fire up in the Python debugger, pdb. Notice how the Python prompt"
" changed from '>>>' to 'pdb>'.  This indicates that you are in the "
"debugger."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:222
msgid ""
"When you first fire up the debugger, Zope gives you a helpful message "
"that tells you how to get to your object.  To understand this message, "
"it's useful to know how you have set Zope up to be debugged. When Zope "
"fires up in debugger mode, there are three breakpoints set for you "
"automatically (if you don't know what a breakpoint is, you need to read "
"the python `debugger documentation "
"<https://docs.python.org/library/pdb.html>`_)."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:230
msgid ""
"The first breakpoint stops the program at the point that ZPublisher (the "
"Zope ORB) tries to publish the application module (in this case, the "
"application module is 'Zope').  The second breakpoint stops the program "
"right before ZPublisher tries to traverse down the provided URL path (in "
"this case, '/News/postnews').  The third breakpoint will stop the program"
" right before ZPublisher calls the object it finds that matches the URL "
"path (in this case, the 'News' object)."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:238
msgid ""
"So, the little blurb that comes up and tells you some keys to press is "
"telling you these things in a terse way.  Hitting 's' will *step* you "
"into the debugger, and hitting 'c' will *continue* the execution of the "
"program until it hits a breakpoint."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:243
msgid ""
"Note however that none of these breakpoints will stop the program at "
"'postnews'.  To stop the debugger right there, you need to tell the "
"debugger to set a new breakpoint.  Why a new breakpoint?  Because Zope "
"will stop you before it traverse your objects path, it will stop you "
"before it calls the object, but if you want to stop it *exactly* at some "
"point in your code, then you have to be explicit.  Sometimes the first "
"three breakpoints are convienent, but often you need to set your own "
"special break point to get you exactly where you want to go."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:252
msgid ""
"Setting a breakpoint is easy (and see the next section for an even easier"
" method).  For example::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:260
msgid ""
"First, you import 'Products'.  Since your module is a Zope product, it "
"can be found in the 'Products' package.  Next, you set a new breakpoint "
"with the *break* debugger command (pdb allows you to use single letter "
"commands, but you could have also used the entire word 'break').  The "
"breakpoint you set is 'Products.ZopeNews.News.News.postnews'.  After "
"setting this breakpoint, the debugger will respond that it found the "
"method in question in a certain file, on a certain line (in this case, "
"the fictitious line 42) and return you to the debugger."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:270
msgid ""
"Now, you want to get to your 'postnews' method so you can start debugging"
" it.  But along the way, you must first *continue* through the various "
"breakpoints that Zope has set for you.  Although this may seem like a bit"
" of a burden, it's actually quite good to get a feel for how Zope works "
"internally by getting down the rhythm that Zope uses to publish your "
"object.  In these next examples, my comments will begin with '#\".  "
"Obviously, you won't see these comments when you are debugging.  So let's"
" debug::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:300
msgid ""
"Here, 'ZPublisher' (which is now publishing the application) has found "
"your object and is about to call it.  Calling your object consists of "
"applying the arguments supplied by 'ZPublisher' to the object.  Here, you"
" can see how 'ZPublisher' is passing three arguments into this process.  "
"The first argument is 'object' and is the actual object you want to call."
"  This can be verified by *printing* the object::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:311
msgid ""
"Now you can inspect your object (with the *print* command) and even play "
"with it a bit.  The next argument is 'args'.  This is a tuple of "
"arguments that 'ZPublisher' will apply to your object call.  The final "
"argument is 'request'.  This is the request object and will eventually be"
" transformed in to the DTML usable object 'REQUEST'. Now continue, your "
"breakpoint is next::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:322
msgid ""
"Now you are here, at your method.  To be sure, tell the debugger to show "
"you where you are in the code with the 'l' command.  Now you can examine "
"variable and perform all the debugging tasks that the Python debugger "
"provides.  From here, with a little knowledge of the Python debugger, you"
" should be able to do any kind of debugging task that is needed."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:330
msgid "Interactive Debugging Triggered From the Web"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:332
msgid ""
"If you are running in debug mode you can set break points in your code "
"and then jump straight to the debugger when Zope comes across your break "
"points.  Here's how to set a breakpoint::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:338
msgid ""
"Now start Zope in debug mode and point your web browser at a URL that "
"causes Zope to execute the method that includes a breakpoint.  When this "
"code is executed, the Python debugger will come up in the terminal where "
"you started Zope.  Also note that from your web browser it looks like "
"Zope is frozen.  Really it's just waiting for you do your debugging."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:345
msgid ""
"From the terminal you are inside the debugger as it is executing your "
"request.  Be aware that you are just debugging one thread in Zope, and "
"other requests may be being served by other threads.  If you go to the "
"*Debugging Info* screen while in the debugger, you can see your debugging"
" request and how long it has been open."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:351
msgid ""
"It is often more convenient to use this method to enter the debugger than"
" it is to call 'ZPublisher.Zope' as detailed in the last section."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:355
msgid "Post-Mortem Debugging"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:357
msgid ""
"Often, you need to use the debugger to chase down obscure problems in "
"your code, but sometimes, the problem is obvious, because an exception "
"gets raised.  For example, consider the following method on your 'News' "
"class::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:365
msgid ""
"Here, you can see that the method tries to substitute 'self.Author' in a "
"string, but earlier we saw that this should really be 'self.author'.  If "
"you tried to run this method from the command line, an exception would be"
" raised::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:380
msgid ""
"Using Zope's normal debugging methods, you would typically need to start "
"from the \"beginning\" and step your way down through the debugger to "
"find this error (in this case, the error is pretty obvious, but more "
"often than not errors can be pretty obscure!)."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:385
msgid ""
"Post-mortem debugging allows you to jump *directly* to the spot in your "
"code that raised the exception, so you do not need to go through the "
"possibly tedious task of stepping your way through a sea of Python code."
"  In the case of our example, you can just pass 'ZPublisher.Zope' call a "
"'pm' argument that is set to 1::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:401
msgid ""
"Here, you can see that instead of taking you back to a python prompt, the"
" post mortem debugging flag has caused you to go right into the "
"debugging, *exactly* at the point in your code where the exception is "
"raised.  This can be verified with the debugger's (l)ist command. Post "
"mortem debugging offers you a handy way to jump right to the section of "
"your code that is failing in some obvious way by raising an exception."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:410
msgid "Debugging With ZEO"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:412
msgid ""
"ZEO presents some interesting debugging abilities.  ZEO lets you debug "
"one ZEO client when other clients continue to server requests for your "
"site.  In the above examples, you have to shut down Zope to run in the "
"debugger, but with ZEO, you can debug a production site while other "
"clients continue to serve requests. Using ZEO is beyond the scope of this"
" chapter. However, once you have ZEO running, you can debug a client "
"process exactly as you debug a single-process Zope."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:423
msgid "Unit Testing"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:425
msgid ""
"Unit testing allows you to automatically test your classes to make sure "
"they are working correctly. By using unit tests you can make sure as you "
"develop and change your classes that you are not breaking them. Zope's "
"own unit tests are written using the built-in Python `unittest module "
"<https://docs.python.org/library/unittest.html>`_."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:433
msgid "What Are Unit Tests"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:435
msgid ""
"A \"unit\" may be defined as a piece of code with a single intended "
"purpose.  A \"unit test\" is defined as a piece of code which exists to "
"codify the intended behavior of a unit and to compare its intended "
"behavior against its actual behavior."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:440
msgid ""
"Unit tests are a way for developers and quality assurance engineers to "
"quickly ascertain whether independent units of code are working as "
"expected.  Unit tests are generally written at the same time as the code "
"they are intended to test.  A unit testing framework allows a collection "
"of unit tests to be run without human intervention, producing a minimum "
"of output if all the tests in the collection are successful."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:448
msgid ""
"It's a good idea to have a sense of the limits of unit testing.  From the"
" `Extreme Programming Enthusiast website "
"<http://wiki.c2.com/?UnitTestsDefined>`_ here is a list of things that "
"unit tests are *not*:"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:453
msgid "Manually operated."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:455
msgid ""
"Automated screen-driver tests that simulate user input (these are "
"\"functional tests\")."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:458
msgid "Interactive.  They run \"no questions asked.\""
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:460
msgid ""
"Coupled.  They run without dependencies except those native to the thing "
"being tested."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:463
msgid ""
"Complicated.  Unit test code is typically straightforward procedural code"
" that simulates an event."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:467
msgid "Writing Unit Tests"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:469
msgid "Here are the times when you should write unit tests:"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:471
msgid "When you write new code"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:473
msgid "When you change and enhance existing code"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:475
msgid "When you fix bugs"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:477
msgid ""
"It's much better to write tests when you're working on code than to wait "
"until you're all done and then write tests."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:480
msgid ""
"You should write tests that exercise discrete \"units\" of functionality."
"  In other words, write simple, specific tests that test one capability."
"  A good place to start is with interfaces and classes.  Classes and "
"especially interfaces already define units of work which you may wish to "
"test."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:486
msgid ""
"Since you can't possibly write tests for every single capability and "
"special case, you should focus on testing the riskiest parts of your "
"code.  The riskiest parts are those that would be the most disastrous if "
"they failed.  You may also want to test particularly tricky or frequently"
" changed things."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:492
msgid ""
"Here's an example test script that tests the 'News' class defined earlier"
" in this chapter::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:524
msgid ""
"You should save tests inside a 'tests' sub-directory in your product's "
"directory. Test scripts file names should start with test, for example "
"'testNews.py'. You may accumulate many test scripts in your product's "
"'tests' directory.  You can run test your product by running the test "
"scripts."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:530
msgid ""
"We cannot cover all there is to say about unit testing here. Take a look "
"at the `unittest module documentation "
"<https://docs.python.org/library/unittest.html>`_ for more background on "
"unit testing."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:536
msgid "Zope Test Fixtures"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:538
msgid ""
"One issue that you'll run into when unit testing is that you may need to "
"set up a Zope environment in order to test your products.  You can solve "
"this problem in two ways.  First, you can structure your product so that "
"much of it can be tested without Zope (as you did in the last section).  "
"Second, you can create a test fixture that sets up a Zope environment for"
" testing."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:545
msgid "To create a test fixture for Zope you'll need to:"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:547
msgid "Add Zope's 'lib/python' directory to the Python path."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:549
msgid "Import 'Zope' and any other needed Zope modules and packages."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:551
msgid "Get a Zope application object."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:553
msgid "Do your test using the application object."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:555
msgid ""
"Clean up the test by aborting or committing the transaction and closing "
"the Zope database connection."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:558
msgid ""
"Here's an example Zope test fixture that demonstrates how to do each of "
"these steps::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:604
msgid ""
"This example shows a fairly complete Zope test fixture.  If your Zope "
"tests only needs to import Zope modules and packages you can skip getting"
" a Zope application object and closing the database transaction."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:609
msgid ""
"Some times you may run into trouble if your test assuming that there is a"
" current Zope request.  There are two ways to deal with this. One is to "
"use the 'makerequest' utility module to create a fake request.  For "
"example::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:622
msgid ""
"This will create a Zope application object that is wrapped in a request."
"  This will enable code that expects to acquire a 'REQUEST' attribute "
"work correctly."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:626
msgid ""
"Another solution to testing methods that expect a request is to use the "
"'ZPublisher.Zope' function described earlier.  Using this approach you "
"can simulate HTTP requests in your unit tests.  For example::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:642
msgid ""
"If the 's' argument is passed to 'ZPublisher.Zope' then no output will be"
" sent to 'sys.stdout'.  If you want to capture the output of the "
"publishing request and compare it to an expected value you'll need to do "
"something like this::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:654
msgid ""
"Here's a final note on unit testing with a Zope test fixture: you may "
"find Zope helpful.  ZEO allows you to test an application while it "
"continues to serve other users.  It also speeds Zope start up time which "
"can be a big relief if you start and stop Zope frequently while testing."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:660
msgid ""
"Despite all the attention we've paid to Zope testing fixtures, you should"
" probably concentrate on unit tests that don't require a Zope test "
"fixture.  If you can't test much without Zope there is a good chance that"
" your product would benefit from some refactoring to make it simpler and "
"less dependent on the Zope framework."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:667
msgid "Logging"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:669
msgid ""
"Zope provides a framework for logging information to Zope's application "
"log.  You can configure Zope to write the application log to a file, "
"syslog, or other back-end."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:673
msgid ""
"The logging API defined in the 'zLOG' module.  This module provides the "
"'LOG' function which takes the following required arguments:"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:676
msgid "subsystem -- The subsystem generating the message (e.g. \"ZODB\")"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:678
msgid ""
"severity -- The \"severity\" of the event.  This may be an integer or a "
"floating point number.  Logging back ends may consider the int() of this "
"value to be significant.  For example, a back-end may consider any "
"severity whose integer value is WARNING to be a warning."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:684
msgid "summary -- A short summary of the event"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:686
msgid "These arguments to the 'LOG' function are optional:"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:688
msgid "detail -- A detailed description"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:690
msgid ""
"error -- A three-element tuple consisting of an error type, value, and "
"traceback.  If provided, then a summary of the error is added to the "
"detail."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:694
msgid ""
"reraise -- If provided with a true value, then the error given by error "
"is reraised."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:697
msgid ""
"You can use the 'LOG' function to send warning and errors to the Zope "
"application log."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:700
msgid ""
"Here's an example of how to use the 'LOG' function to write debugging "
"messages::"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:706
msgid ""
"You can use 'LOG' in much the same way as you would use print statements "
"to log debugging information while Zope is running.  You should remember "
"that Zope can be configured to ignore log messages below certain levels "
"of severity.  If you are not seeing your logging messages, make sure that"
" Zope is configured to write them to the application log."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:713
msgid ""
"In general the debugger is a much more powerful way to locate problems "
"than using the logger.  However, for simple debugging tasks and for "
"issuing warnings the logger works just fine."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:718
msgid "Other Testing and Debugging Facilities"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:720
msgid ""
"There is a few other testing and debugging techniques and tools not "
"commonly used to test Zope.  In this section we'll mention several of "
"them."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:725
msgid "Debug Logging"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:727
msgid ""
"Zope provides an analysis tool for debugging log output.  This output "
"allows may give you hints as to where your application may be performing "
"poorly, or not responding at all.  For example, since writing Zope "
"products lets your write unrestricted Python code, it's very possibly to "
"get yourself in a situation where you \"hang\" a Zope request, possibly "
"by getting into a infinite loop."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:734
msgid ""
"To try and detect at which point your application hangs, use the "
"*requestprofiler.py* script in the *utilities* directory of your Zope "
"installation.  To use this script, you must run Zope with the '-M' "
"command line option.  This will turn on \"detailed debug logging\" that "
"is necessary for the *requestprofiler.py* script to run.  The "
"*requestprofiler.py* script has quite a few options which you can learn "
"about with the '--help' switch."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:742
msgid ""
"In general debug log analysis should be a last resort.  Use it when Zope "
"is hanging and normal debugging and profiling is not helping you solve "
"your problem."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:747
msgid "HTTP Benchmarking"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:749
msgid ""
"HTTP load testing is notoriously inaccurate.  However, it is useful to "
"have a sense of how many requests your server can support.  Zope does not"
" come with any HTTP load testing tools, but there are many available.  "
"Apache's 'ab' program is a widely used free tool that can load your "
"server with HTTP requests."
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:756
msgid "Summary"
msgstr ""

#: ../../zdgbook/TestingAndDebugging.rst:758
msgid ""
"Zope provides a number of different debugging and testing facilities. The"
" debugger allows you to interactively test your applications. Unit tests "
"allow help you make sure that your application is develops correctly.  "
"The logger allows you to do simple debugging and issue warnings."
msgstr ""

